import mysql.connector
from mysql.connector import Error
import logging
from datetime import datetime
import threading
import json

logger = logging.getLogger(__name__)

class DatabaseManager:
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls, config=None):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(DatabaseManager, cls).__new__(cls)
                if config:
                    cls._instance._initialize(config)
            return cls._instance
    
    def _initialize(self, config):
        self.config = config
        self.connection = None
        self._connect()
        self._create_tables()
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL"""
        try:
            self.connection = mysql.connector.connect(**self.config)
            self.connection.autocommit = True
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL")
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
            raise
    
    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.connection or not self.connection.is_connected():
                self._connect()
            return self.connection
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise

    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤"""
        try:
            cursor = self.connection.cursor()

            # –¢–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å –ø–æ–ª—è–º–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞)
            create_appeals_table = """
            CREATE TABLE IF NOT EXISTS appeals (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id VARCHAR(255) NOT NULL,
                text TEXT NOT NULL,
                type VARCHAR(100),
                platform VARCHAR(50),
                status VARCHAR(50) DEFAULT 'new',
                response TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                responded_at TIMESTAMP NULL,
                tags JSON,
                settlement VARCHAR(255),
                street VARCHAR(255),
                house VARCHAR(50),
                full_address TEXT,
                district VARCHAR(255),  -- –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ä–∞–π–æ–Ω–∞
                INDEX idx_user (user_id),
                INDEX idx_type (type),
                INDEX idx_status (status),
                INDEX idx_created (created_at),
                INDEX idx_settlement (settlement),
                INDEX idx_district (district)  -- –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–∞–π–æ–Ω–∞
            )
            """

            # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–Ω–¥–æ–≤
            create_trends_table = """
            CREATE TABLE IF NOT EXISTS trends (
                id INT AUTO_INCREMENT PRIMARY KEY,
                keyword VARCHAR(255) NOT NULL,
                frequency INT DEFAULT 0,
                period DATE NOT NULL,
                appeal_type VARCHAR(100),
                UNIQUE KEY unique_trend (keyword, period, appeal_type)
            )
            """

            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ (–¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞)
            create_settlements_table = """
            CREATE TABLE IF NOT EXISTS settlements (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                type VARCHAR(100) NOT NULL,
                district VARCHAR(255),
                population INT,
                latitude DECIMAL(10, 8),
                longitude DECIMAL(11, 8),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_name (name),
                INDEX idx_district (district)
            )
            """

            cursor.execute(create_appeals_table)
            cursor.execute(create_trends_table)
            cursor.execute(create_settlements_table)
            self.connection.commit()
            cursor.close()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            raise

    def store_appeal(self, appeal_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –±–∞–∑—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥—Ä–µ—Å–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–π–æ–Ω–∞"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, –Ω–æ –Ω–µ—Ç —Ä–∞–π–æ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω
            settlement = appeal_data.get('settlement')
            district = appeal_data.get('district')
            
            if settlement and not district:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É
                district = self._determine_district_by_settlement(settlement)
                if district:
                    appeal_data['district'] = district
                    logger.info(f"üìç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–π–æ–Ω –¥–ª—è {settlement}: {district}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞–¥—Ä–µ—Å–∞
            fields = ['user_id', 'text', 'type', 'platform', 'status', 'created_at']
            placeholders = ['%s'] * len(fields)
            values = [
                appeal_data['user_id'],
                appeal_data['text'],
                appeal_data.get('type'),
                appeal_data.get('platform'),
                '–Ω–æ–≤–æ–µ',  # –í—Å–µ –Ω–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞—Ç—É—Å "–Ω–æ–≤–æ–µ"
                appeal_data.get('created_at')
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            address_fields = ['settlement', 'street', 'house', 'full_address', 'district']
            for field in address_fields:
                if field in appeal_data and appeal_data[field]:
                    fields.append(field)
                    placeholders.append('%s')
                    values.append(appeal_data[field])
            
            query = f"""
            INSERT INTO appeals ({', '.join(fields)})
            VALUES ({', '.join(placeholders)})
            """
            
            cursor.execute(query, values)
            appeal_id = cursor.lastrowid
            cursor.close()
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ ID: {appeal_id}, —Ä–∞–π–æ–Ω: {district}")
            return appeal_id
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            raise

    def migrate_statuses_to_russian(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞ —Ä—É—Å—Å–∫–∏–µ"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor()
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π mapping –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            status_mapping = {
                'new': '–Ω–æ–≤–æ–µ',
                'answered': '–æ—Ç–≤–µ—á–µ–Ω–æ', 
                'in_progress': '–≤ —Ä–∞–±–æ—Ç–µ',
                'requires_manual_review': '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                'requires_review': '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                'manual_review': '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                'closed': '–∑–∞–∫—Ä—ã—Ç–æ',
                'completed': '–∑–∞–∫—Ä—ã—Ç–æ'
            }
            
            for eng_status, ru_status in status_mapping.items():
                cursor.execute(
                    "UPDATE appeals SET status = %s WHERE status = %s",
                    (ru_status, eng_status)
                )
                updated_count = cursor.rowcount
                if updated_count > 0:
                    logger.info(f"üîÑ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ç—É—Å—ã: {eng_status} -> {ru_status} ({updated_count} –∑–∞–ø–∏—Å–µ–π)")
            
            conn.commit()
            cursor.close()
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            raise
    
    def _determine_district_by_settlement(self, settlement):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞"""
        if not settlement:
            return None
            
        settlement_lower = settlement.lower()
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Ä–∞–π–æ–Ω–∞–º–∏
        district_mapping = {
            '—Ç–∞–º–±–æ–≤': '–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥ –¢–∞–º–±–æ–≤',
            '–º–∏—á—É—Ä–∏–Ω—Å–∫': '–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥ –ú–∏—á—É—Ä–∏–Ω—Å–∫',
            '–º–æ—Ä—à–∞–Ω—Å–∫': '–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥ –ú–æ—Ä—à–∞–Ω—Å–∫',
            '–∫–∏—Ä—Å–∞–Ω–æ–≤': '–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥ –ö–∏—Ä—Å–∞–Ω–æ–≤',
            '–∫–æ—Ç–æ–≤—Å–∫': '–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥ –ö–æ—Ç–æ–≤—Å–∫',
            '—Ä–∞—Å—Å–∫–∞–∑–æ–≤–æ': '–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥ –†–∞—Å—Å–∫–∞–∑–æ–≤–æ',
            '—É–≤–∞—Ä–æ–≤–æ': '–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥ –£–≤–∞—Ä–æ–≤–æ',
            '–±–æ–Ω–¥–∞—Ä–∏': '–ë–æ–Ω–¥–∞—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–≥–∞–≤—Ä–∏–ª–æ–≤–∫–∞': '–ì–∞–≤—Ä–∏–ª–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–∂–µ—Ä–¥–µ–≤–∫–∞': '–ñ–µ—Ä–¥–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–∑–Ω–∞–º–µ–Ω–∫–∞': '–ó–Ω–∞–º–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–∏–Ω–∂–∞–≤–∏–Ω–æ': '–ò–Ω–∂–∞–≤–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–º–æ—Ä–¥–æ–≤–æ': '–ú–æ—Ä–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–º—É—á–∫–∞–ø—Å–∫–∏–π': '–ú—É—á–∫–∞–ø—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–ø–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π': '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–ø–µ—Ç—Ä–æ–≤—Å–∫–æ–µ': '–ü–µ—Ç—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '–ø–∏—á–∞–µ–≤–æ': '–ü–∏—á–∞–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '—Ä–∂–∞–∫—Å–∞': '–†–∂–∞–∫—Å–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '—Å–∞—Ç–∏–Ω–∫–∞': '–°–∞–º–ø—É—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '—Å–æ—Å–Ω–æ–≤–∫–∞': '–°–æ—Å–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '—Å—Ç–∞—Ä–æ—é—Ä—å–µ–≤–æ': '–°—Ç–∞—Ä–æ—é—Ä—å–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '—Ç–æ–∫–∞—Ä—ë–≤–∫–∞': '–¢–æ–∫–∞—Ä—ë–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
            '—É–º—ë—Ç': '–£–º—ë—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω'
        }
        
        for key, district in district_mapping.items():
            if key in settlement_lower:
                return district
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for key, district in district_mapping.items():
            if any(word in settlement_lower for word in key.split()):
                return district
        
        return None

    def get_municipality_stats(self, period_days=30):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor(dictionary=True)
            
            query = """
            SELECT 
                COALESCE(a.district, '–ù–µ —É–∫–∞–∑–∞–Ω') as municipality,
                COUNT(*) as appeal_count,
                COUNT(CASE WHEN a.status = '–æ—Ç–≤–µ—á–µ–Ω–æ' THEN 1 END) as answered_count,
                COUNT(CASE WHEN a.status = '–Ω–æ–≤–æ–µ' THEN 1 END) as new_count,
                COUNT(CASE WHEN a.status = '–≤ —Ä–∞–±–æ—Ç–µ' THEN 1 END) as in_progress_count,
                COUNT(CASE WHEN a.status = '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏' THEN 1 END) as requires_review_count,
                ROUND(COUNT(CASE WHEN a.status = '–æ—Ç–≤–µ—á–µ–Ω–æ' THEN 1 END) * 100.0 / COUNT(*), 2) as response_rate
            FROM appeals a
            WHERE a.created_at >= DATE_SUB(NOW(), INTERVAL %s DAY)
            GROUP BY COALESCE(a.district, '–ù–µ —É–∫–∞–∑–∞–Ω')
            ORDER BY appeal_count DESC
            LIMIT 15
            """
            
            cursor.execute(query, (period_days,))
            stats = cursor.fetchall()
            cursor.close()
            
            logger.info(f"üèõÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {len(stats)} –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º")
            return stats
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º: {e}")
            return []

    def get_municipality_trends(self, period_days=30):
        """–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor(dictionary=True)
            
            query = """
            SELECT 
                DATE(a.created_at) as date,
                COALESCE(a.district, '–ù–µ —É–∫–∞–∑–∞–Ω') as municipality,
                COUNT(*) as daily_count
            FROM appeals a
            WHERE a.created_at >= DATE_SUB(NOW(), INTERVAL %s DAY)
            GROUP BY DATE(a.created_at), COALESCE(a.district, '–ù–µ —É–∫–∞–∑–∞–Ω')
            ORDER BY date, municipality
            """
            
            cursor.execute(query, (period_days,))
            trends = cursor.fetchall()
            cursor.close()
            
            return trends
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º: {e}")
            return []

    def get_municipality_type_stats(self, period_days=30):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–µ–∑–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor(dictionary=True)
            
            query = """
            SELECT 
                COALESCE(a.district, '–ù–µ —É–∫–∞–∑–∞–Ω') as municipality,
                COALESCE(a.type, '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') as appeal_type,
                COUNT(*) as type_count
            FROM appeals a
            WHERE a.created_at >= DATE_SUB(NOW(), INTERVAL %s DAY)
            GROUP BY COALESCE(a.district, '–ù–µ —É–∫–∞–∑–∞–Ω'), COALESCE(a.type, '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
            ORDER BY municipality, type_count DESC
            """
            
            cursor.execute(query, (period_days,))
            stats = cursor.fetchall()
            cursor.close()
            
            return stats
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            return []

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def update_appeal(self, appeal_id, update_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor()
            
            set_clause = ", ".join([f"{key} = %s" for key in update_data.keys()])
            values = list(update_data.values())
            values.append(appeal_id)
            
            query = f"UPDATE appeals SET {set_clause} WHERE id = %s"
            
            cursor.execute(query, values)
            cursor.close()
            
            logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ ID: {appeal_id}")
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            raise

    def get_appeals(self, filters=None, limit=100, offset=0):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor(dictionary=True)
            
            where_clause = "WHERE 1=1"
            params = []
            
            if filters:
                if 'user_id' in filters:
                    where_clause += " AND user_id = %s"
                    params.append(filters['user_id'])
                if 'type' in filters:
                    where_clause += " AND type = %s"
                    params.append(filters['type'])
                if 'status' in filters:
                    where_clause += " AND status = %s"
                    params.append(filters['status'])
                if 'date_from' in filters:
                    where_clause += " AND created_at >= %s"
                    params.append(filters['date_from'])
                if 'date_to' in filters:
                    where_clause += " AND created_at <= %s"
                    params.append(filters['date_to'])
            
            query = f"""
            SELECT * FROM appeals 
            {where_clause}
            ORDER BY created_at DESC 
            LIMIT %s OFFSET %s
            """
            
            params.extend([limit, offset])
            cursor.execute(query, params)
            appeals = cursor.fetchall()
            cursor.close()
            
            return appeals
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            return []

    def get_recent_appeals(self, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor(dictionary=True)
            
            query = """
            SELECT * FROM appeals 
            ORDER BY created_at DESC 
            LIMIT %s
            """
            
            cursor.execute(query, (limit,))
            appeals = cursor.fetchall()
            cursor.close()
            
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ {len(appeals)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π")
            return appeals
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            return []

    def get_appeals_stats(self, period_days=30):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor(dictionary=True)
            
            query = """
            SELECT 
                type,
                status,
                COUNT(*) as count
            FROM appeals 
            WHERE created_at >= DATE_SUB(NOW(), INTERVAL %s DAY)
            GROUP BY type, status
            ORDER BY count DESC
            """
            
            cursor.execute(query, (period_days,))
            stats = cursor.fetchall()
            cursor.close()
            
            return stats
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return []

    def get_real_time_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor(dictionary=True)
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π
            cursor.execute("SELECT COUNT(*) as total FROM appeals")
            total = cursor.fetchone()['total']
            
            # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º (—Ä—É—Å—Å–∫–∏–µ)
            cursor.execute("""
                SELECT status, COUNT(*) as count 
                FROM appeals 
                GROUP BY status
            """)
            status_stats = {row['status']: row['count'] for row in cursor.fetchall()}
            
            # –ü–æ —Ç–∏–ø–∞–º (—Ç–æ–ø-5)
            cursor.execute("""
                SELECT type, COUNT(*) as count 
                FROM appeals 
                WHERE type IS NOT NULL 
                GROUP BY type 
                ORDER BY count DESC 
                LIMIT 5
            """)
            type_stats = cursor.fetchall()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cursor.execute("""
                SELECT COUNT(*) as last_24h 
                FROM appeals 
                WHERE created_at >= DATE_SUB(NOW(), INTERVAL 24 HOUR)
            """)
            last_24h = cursor.fetchone()['last_24h']
            
            cursor.close()
            
            logger.info(f"üìä –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ {total}, –∑–∞ 24—á: {last_24h}")
            
            return {
                'total': total,
                'status_stats': status_stats,
                'type_stats': type_stats,
                'last_24h': last_24h
            }
            
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}


    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection and self.connection.is_connected():
            self.connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ")