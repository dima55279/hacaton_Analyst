import logging
from datetime import datetime, timedelta
import json
import re
import os

logger = logging.getLogger(__name__)

class AppealsAnalyzer:
    def __init__(self, gigachat_client, database):
        self.gigachat = gigachat_client
        self.db = database
        self.common_types = [
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –ñ–ö–•",
            "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É", 
            "–∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –¥–æ—Ä–æ–≥–∏",
            "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É",
            "–∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            "–∂–∞–ª–æ–±–∞ –Ω–∞ —à—É–º",
            "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ"
        ]
        self.settlements_data = self._load_settlements_data()

    def _find_municipality_by_settlement(self, settlement_name, district_name=None):
        """–ü–æ–∏—Å–∫ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —Ä–∞–π–æ–Ω—É"""
        if not settlement_name or not self.settlements_data:
            return None
        
        settlement_lower = settlement_name.lower().strip()
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞ –¥–ª—è: {settlement_name}, —Ä–∞–π–æ–Ω: {district_name}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞—Ö
        for municipality in self.settlements_data:
            mun_name_lower = municipality['name'].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
            if (settlement_lower in mun_name_lower or 
                mun_name_lower in settlement_lower or
                any(word in mun_name_lower for word in settlement_lower.split())):
                
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {municipality['name']}")
                return municipality
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for municipality in self.settlements_data:
            mun_name_lower = municipality['name'].lower()
            
            # –î–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –æ–∫—Ä—É–≥–æ–≤
            if '–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥' in mun_name_lower:
                if '—Ç–∞–º–±–æ–≤' in settlement_lower:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –¥–ª—è –¢–∞–º–±–æ–≤–∞: {municipality['name']}")
                    return municipality
                elif any(keyword in settlement_lower for keyword in ['–∫–∏—Ä—Å–∞–Ω–æ–≤', '–∫–æ—Ç–æ–≤—Å–∫', '–º–∏—á—É—Ä–∏–Ω—Å–∫', '–º–æ—Ä—à–∞–Ω—Å–∫', '—Ä–∞—Å—Å–∫–∞–∑–æ–≤–æ', '—É–≤–∞—Ä–æ–≤–æ']):
                    city_name = None
                    if '–∫–∏—Ä—Å–∞–Ω–æ–≤' in settlement_lower:
                        city_name = '–ö–∏—Ä—Å–∞–Ω–æ–≤'
                    elif '–∫–æ—Ç–æ–≤—Å–∫' in settlement_lower:
                        city_name = '–ö–æ—Ç–æ–≤—Å–∫'
                    elif '–º–∏—á—É—Ä–∏–Ω—Å–∫' in settlement_lower:
                        city_name = '–ú–∏—á—É—Ä–∏–Ω—Å–∫'
                    elif '–º–æ—Ä—à–∞–Ω—Å–∫' in settlement_lower:
                        city_name = '–ú–æ—Ä—à–∞–Ω—Å–∫'
                    elif '—Ä–∞—Å—Å–∫–∞–∑–æ–≤–æ' in settlement_lower:
                        city_name = '–†–∞—Å—Å–∫–∞–∑–æ–≤–æ'
                    elif '—É–≤–∞—Ä–æ–≤–æ' in settlement_lower:
                        city_name = '–£–≤–∞—Ä–æ–≤–æ'
                    
                    if city_name and city_name.lower() in mun_name_lower:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –¥–ª—è {city_name}: {municipality['name']}")
                        return municipality
        
        # –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –¢–∞–º–±–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_municipality = self._find_tambov_default()
        if default_municipality:
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_municipality['name']}")
            return default_municipality
        
        logger.warning(f"‚ùå –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –¥–ª—è {settlement_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    def _find_tambov_default(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –¢–∞–º–±–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        for municipality in self.settlements_data:
            if '—Ç–∞–º–±–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω' in municipality['name'].lower():
                return municipality
        return None

    def _load_settlements_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è—Ö"""
        try:
            possible_paths = [
                'settlements.data.json',
                '../settlements.data.json',
                './data/settlements.data.json'
            ]
            
            for file_path in possible_paths:
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {len(data)} –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º –∏–∑ {file_path}")
                        return data
            
            logger.error("‚ùå –§–∞–π–ª settlements.data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: {e}")
            return []

    def _find_municipality_by_settlement(self, settlement_name, district_name=None):
        """–ü–æ–∏—Å–∫ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —Ä–∞–π–æ–Ω—É"""
        if not settlement_name or not self.settlements_data:
            return None
        
        settlement_lower = settlement_name.lower().strip()
        district_lower = district_name.lower().strip() if district_name else None
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞ –¥–ª—è: {settlement_name}, —Ä–∞–π–æ–Ω: {district_name}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–π–æ–Ω–∞
        if district_lower:
            for municipality in self.settlements_data:
                if district_lower in municipality['name'].lower():
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –ø–æ —Ä–∞–π–æ–Ω—É: {municipality['name']}")
                    return municipality
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º –ø–æ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        for municipality in self.settlements_data:
            mun_name_lower = municipality['name'].lower()
            
            if district_lower and district_lower in mun_name_lower:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É —Ä–∞–π–æ–Ω–∞: {municipality['name']}")
                return municipality
            
            # –î–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –æ–∫—Ä—É–≥–æ–≤
            if '–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥' in mun_name_lower and '—Ç–∞–º–±–æ–≤' in settlement_lower:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –¥–ª—è –¢–∞–º–±–æ–≤–∞: {municipality['name']}")
                return municipality
        
        # –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –¢–∞–º–±–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_municipality = self._find_tambov_default()
        if default_municipality:
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_municipality['name']}")
            return default_municipality
        
        logger.warning("‚ùå –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    def _find_tambov_default(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –¢–∞–º–±–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        for municipality in self.settlements_data:
            if '—Ç–∞–º–±–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω' in municipality['name'].lower():
                return municipality
        return None

    def _generate_municipality_contacts(self, municipality):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
        if not municipality:
            return ""
        
        contacts = f"""

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {municipality['name']}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {municipality['telephone']}
‚Ä¢ Email: {municipality['email']}
‚Ä¢ –ê–¥—Ä–µ—Å: {municipality['address']}

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."""
        
        return contacts

    def _replace_all_contact_placeholders(self, text, phone):
        """–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ó–ê–ú–ï–ù–ê –í–°–ï–• –í–û–ó–ú–û–ñ–ù–´–• –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í –¢–ï–õ–ï–§–û–ù–ê"""
        if not text or not phone:
            return text
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã (–≤–∫–ª—é—á–∞—è –æ–ø–µ—á–∞—Ç–∫–∏)
        patterns = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
            r'\[—É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\]',
            r'\[—É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\]',
            r'\[–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\]',
            r'\[–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\]',
            r'\[—Ç–µ–ª–µ—Ñ–æ–Ω\]',
            r'XXX-XX-XX',
            
            # –û–ø–µ—á–∞—Ç–∫–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            r'\[–¥–∏–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\]',
            r'\[–¥–∏–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\]',
            r'\[—É–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω\]',
            r'\[—É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\]',
            r'\[–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω\]',
            r'\[–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\]',
            
            # –ë–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫
            r'—É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            r'—É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
            r'–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω',
            r'–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            r'–¥–∏–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        ]
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        for pattern in patterns:
            text = re.sub(pattern, f'–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}', text, flags=re.IGNORECASE)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –∑–∞–º–µ–Ω—è–µ–º —Ñ—Ä–∞–∑—ã –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        text = re.sub(r'–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\s*\.', f'–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}.', text)
        text = re.sub(r'–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\s*$', f'–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}', text)
        
        return text

    def _ensure_phone_in_text(self, text, phone):
        """–ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–õ–ï–§–û–ù–ê –í –¢–ï–ö–°–¢"""
        if not text or not phone:
            return text
        
        # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if phone not in text:
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            sentences = text.split('.')
            if len(sentences) > 1:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
                last_sentence = sentences[-2] if sentences[-1].strip() == '' else sentences[-1]
                if '—Ç–µ–ª–µ—Ñ–æ–Ω' not in last_sentence.lower() and '–∑–≤–æ–Ω–∏—Ç—å' not in last_sentence.lower():
                    text = text.rstrip()
                    if not text.endswith('.'):
                        text += '.'
                    text += f' –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}.'
            else:
                text += f' –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}.'
        
        return text

    def classify_appeal(self, appeal_text):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é GigaChat"""
        try:
            prompt = f"""
            –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –æ–±—Ä–∞—â–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: 
            {', '.join(self.common_types)}
            
            –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —ç—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–µ—Ä–Ω–∏ "–¥—Ä—É–≥–æ–µ".
            
            –û–±—Ä–∞—â–µ–Ω–∏–µ: "{appeal_text}"
            
            –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
            """
            
            response = self.gigachat.chat_completion([
                {"role": "system", "content": "–¢—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω"},
                {"role": "user", "content": prompt}
            ])
            
            appeal_type = response.strip().lower()
            if appeal_type not in [t.lower() for t in self.common_types]:
                appeal_type = "–¥—Ä—É–≥–æ–µ"
                
            logger.info(f"üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫: {appeal_type}")
            return appeal_type
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return "–¥—Ä—É–≥–æ–µ"

    def generate_response(self, appeal_id, appeal_text, appeal_type, address_info=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ô –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            municipality = None
            if address_info:
                settlement = address_info.get('settlement', '')
                district = address_info.get('district', '')
                municipality = self._find_municipality_by_settlement(settlement, district)
                if municipality:
                    logger.info(f"üìç –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞ –¥–ª—è {settlement}")
                else:
                    logger.warning(f"üìç –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç –¥–ª—è {settlement} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            prompt = f"""
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞. –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: "{appeal_text}"
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
            - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
            - –í–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω  
            - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Ä–µ—à–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            - –ù–µ –±–æ–ª–µ–µ 250 —Å–∏–º–≤–æ–ª–æ–≤
            - –ù–ï —É–ø–æ–º–∏–Ω–∞–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏
            
            –û—Ç–≤–µ—Ç:
            """
            
            response = self.gigachat.chat_completion([
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω–∞–º. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."},
                {"role": "user", "content": prompt}
            ])
            
            # –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–î–°–¢–ê–ù–û–í–ö–ê –¢–ï–õ–ï–§–û–ù–ê
            final_response = response.strip()
            
            if municipality:
                phone = municipality['telephone']
                
                # 1. –ó–∞–º–µ–Ω—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                final_response = self._replace_all_contact_placeholders(final_response, phone)
                
                # 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                final_response = self._ensure_phone_in_text(final_response, phone)
                
                # 3. –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                contacts_block = self._generate_municipality_contacts(municipality)
                final_response += contacts_block
                
                logger.info(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω {phone} –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–≤–µ—Ç")
            else:
                final_response += "\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ—Ä–≥–∞–Ω –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞."
            
            logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id}")
            return final_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            base_response = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é."
            
            if address_info and municipality:
                base_response += f" –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {municipality['telephone']}."
                base_response += self._generate_municipality_contacts(municipality)
            
            return base_response

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def analyze_trends(self, period_days=30):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            appeals = self.db.get_appeals({
                'date_from': datetime.now() - timedelta(days=period_days)
            }, limit=1000)
            
            logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: –ø–æ–ª—É—á–µ–Ω–æ {len(appeals)} –æ–±—Ä–∞—â–µ–Ω–∏–π –∑–∞ {period_days} –¥–Ω–µ–π")
            
            if not appeals:
                return {
                    'period_days': period_days,
                    'total_appeals': 0,
                    'type_distribution': {},
                    'common_themes': [],
                    'response_rate': 0,
                    'last_updated': datetime.now().isoformat()
                }
            
            themes = self._extract_themes([a['text'] for a in appeals])
            
            type_stats = {}
            for appeal in appeals:
                appeal_type = appeal['type'] or '–¥—Ä—É–≥–æ–µ'
                type_stats[appeal_type] = type_stats.get(appeal_type, 0) + 1
            
            if not isinstance(themes, list):
                themes = []
            
            trends = {
                'period_days': period_days,
                'total_appeals': len(appeals),
                'type_distribution': type_stats,
                'common_themes': themes[:10],
                'response_rate': self._calculate_response_rate(appeals),
                'last_updated': datetime.now().isoformat()
            }
            
            logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∑–∞ {period_days} –¥–Ω–µ–π")
            return trends
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {}

    def _extract_themes(self, texts):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö —Ç–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        try:
            if not texts:
                return []
                
            combined_text = " ".join(texts[:20])
            
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω –∏ –≤—ã–¥–µ–ª–∏ 10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Ç–µ–º/–ø—Ä–æ–±–ª–µ–º.
            –í–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: [{{"theme": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "frequency": "–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è"}}]
            
            –¢–µ–∫—Å—Ç—ã: {combined_text[:3000]}
            
            –í–∞–∂–Ω–æ: –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
            
            response = self.gigachat.chat_completion([
                {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫, –≤—ã–¥–µ–ª—è—é—â–∏–π –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏–π. –¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON."},
                {"role": "user", "content": prompt}
            ])
            
            response = response.strip()
            json_match = re.search(r'\[.*\]', response, re.DOTALL)
            if json_match:
                response = json_match.group(0)
            
            try:
                themes = json.loads(response)
                if isinstance(themes, list):
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã —Ç–µ–º—ã: {len(themes)}")
                    return themes
                else:
                    return self._extract_themes_fallback(texts)
            except json.JSONDecodeError:
                return self._extract_themes_fallback(texts)
            
        except Exception as e:
            return self._extract_themes_fallback(texts)

    def _extract_themes_fallback(self, texts):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not texts:
            return []
            
        all_text = " ".join(texts).lower()
        
        keywords = {
            '–¥–æ—Ä–æ–≥–∏': ['–¥–æ—Ä–æ–≥', '–∞—Å—Ñ–∞–ª—å—Ç', '—è–º–∞', '—Ä–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–≥', '–≤—ã–±–æ–∏–Ω'],
            '–ñ–ö–•': ['–∂–∫—Ö', '—É–ø—Ä–∞–≤–ª—è—é—â–∞—è', '–æ—Ç–æ–ø–ª–µ–Ω', '–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω', '–º—É—Å–æ—Ä', '–∫–∞–Ω–∞–ª–∏–∑–∞—Ü', '–∫–æ–º–º—É–Ω–∞–ª'],
            '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['–∞–≤—Ç–æ–±—É—Å', '–æ—Å—Ç–∞–Ω–æ–≤–∫', '–º–∞—Ä—à—Ä—É—Ç', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–æ–±—â–µ—Å—Ç–≤–µ–Ω', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
            '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': ['–ø–∞—Ä–∫', '—Å–∫–≤–µ—Ä', '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞', '–æ–∑–µ–ª–µ–Ω–µ–Ω', '–ª–∞–≤–æ—á–∫', '—Å–∫–∞–º–µ–π–∫'],
            '—à—É–º': ['—à—É–º', '–≥—Ä–æ–º–∫–æ', '—Ç–∏—à–∏–Ω–∞', '—à—É–º–Ω'],
            '–¥–æ–∫—É–º–µ–Ω—Ç—ã': ['—Å–ø—Ä–∞–≤–∫', '–¥–æ–∫—É–º–µ–Ω—Ç', '–ø–æ–ª—É—á–∏—Ç—å', '–æ—Ñ–æ—Ä–º–ª–µ–Ω'],
            '–æ—Å–≤–µ—â–µ–Ω–∏–µ': ['–æ—Å–≤–µ—â–µ–Ω', '—Ñ–æ–Ω–∞—Ä', '—Å–≤–µ—Ç', '—Ç–µ–º–Ω–æ', '—É–ª–∏—Ü'],
            '—É–±–æ—Ä–∫–∞': ['—É–±–æ—Ä–∫', '–º—É—Å–æ—Ä', '—á–∏—Å—Ç–æ—Ç–∞', '—É–±—Ä–∞—Ç—å', '–∑–∞—Ö–ª–∞–º–ª–µ–Ω'],
            '–≤–æ–¥–∞': ['–≤–æ–¥', '–Ω–∞–ø–æ—Ä', '–∫–∞—á–µ—Å—Ç–≤', '–ø–∏—Ç—å–µ–≤'],
            '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ': ['–æ—Ç–æ–ø–ª–µ–Ω', '–±–∞—Ç–∞—Ä–µ', '—Ç–µ–ø–ª', '—Ö–æ–ª–æ–¥–Ω']
        }
        
        themes = []
        for theme, words in keywords.items():
            count = sum(1 for word in words if word in all_text)
            if count > 0:
                total_words = len(all_text.split())
                frequency_percentage = (count / total_words) * 1000
                
                if frequency_percentage > 5:
                    frequency = "–≤—ã—Å–æ–∫–∞—è"
                elif frequency_percentage > 2:
                    frequency = "—Å—Ä–µ–¥–Ω—è—è"
                else:
                    frequency = "–Ω–∏–∑–∫–∞—è"
                
                themes.append({
                    "theme": theme, 
                    "frequency": frequency,
                    "count": count
                })
        
        themes.sort(key=lambda x: x.get('count', 0), reverse=True)
        return themes[:10]

    def _calculate_response_rate(self, appeals):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        if not appeals:
            return 0
            
        answered = sum(1 for a in appeals if a.get('status') == 'answered')
        total = len(appeals)
        return round((answered / total * 100), 2) if total > 0 else 0

    def get_common_types(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        return self.common_types