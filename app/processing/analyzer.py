import logging
from datetime import datetime, timedelta
import json
import re

logger = logging.getLogger(__name__)

class AppealsAnalyzer:
    def __init__(self, gigachat_client, database):
        self.gigachat = gigachat_client
        self.db = database
        self.common_types = [
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –ñ–ö–•",
            "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É", 
            "–∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –¥–æ—Ä–æ–≥–∏",
            "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É",
            "–∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            "–∂–∞–ª–æ–±–∞ –Ω–∞ —à—É–º",
            "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ"
        ]

    def classify_appeal(self, appeal_text):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é GigaChat"""
        try:
            prompt = f"""
            –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –æ–±—Ä–∞—â–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: 
            {', '.join(self.common_types)}
            
            –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —ç—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–µ—Ä–Ω–∏ "–¥—Ä—É–≥–æ–µ".
            
            –û–±—Ä–∞—â–µ–Ω–∏–µ: "{appeal_text}"
            
            –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
            """
            
            response = self.gigachat.chat_completion([
                {"role": "system", "content": "–¢—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω"},
                {"role": "user", "content": prompt}
            ])
            
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            appeal_type = response.strip().lower()
            if appeal_type not in [t.lower() for t in self.common_types]:
                appeal_type = "–¥—Ä—É–≥–æ–µ"
                
            logger.info(f"üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫: {appeal_type}")
            return appeal_type
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return "–¥—Ä—É–≥–æ–µ"

    def generate_response(self, appeal_id, appeal_text, appeal_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
        try:
            # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            similar_appeals = self.db.get_appeals({
                'type': appeal_type,
                'status': 'answered'
            }, limit=3)
            
            context = ""
            if similar_appeals:
                context = "–ü—Ä–∏–º–µ—Ä—ã –ø–æ—Ö–æ–∂–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤:\n"
                for appeal in similar_appeals:
                    context += f"–û–±—Ä–∞—â–µ–Ω–∏–µ: {appeal['text'][:200]}...\n"
                    context += f"–û—Ç–≤–µ—Ç: {appeal['response'][:200]}...\n\n"
            
            prompt = f"""
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞.
            
            –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {appeal_type}
            –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: "{appeal_text}"
            
            {context}
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
            - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
            - –í–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω
            - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            - –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
            - –ù–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            
            –û—Ç–≤–µ—Ç:
            """
            
            response = self.gigachat.chat_completion([
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},
                {"role": "user", "content": prompt}
            ])
            
            logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id}")
            return response.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é."

    def analyze_trends(self, period_days=30):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            appeals = self.db.get_appeals({
                'date_from': datetime.now() - timedelta(days=period_days)
            }, limit=1000)
            
            logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: –ø–æ–ª—É—á–µ–Ω–æ {len(appeals)} –æ–±—Ä–∞—â–µ–Ω–∏–π –∑–∞ {period_days} –¥–Ω–µ–π")
            
            if not appeals:
                return {
                    'period_days': period_days,
                    'total_appeals': 0,
                    'type_distribution': {},
                    'common_themes': [],
                    'response_rate': 0,
                    'last_updated': datetime.now().isoformat()
                }
            
            # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç—ã—Ö —Ç–µ–º
            themes = self._extract_themes([a['text'] for a in appeals])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            type_stats = {}
            for appeal in appeals:
                appeal_type = appeal['type'] or '–¥—Ä—É–≥–æ–µ'
                type_stats[appeal_type] = type_stats.get(appeal_type, 0) + 1
            
            trends = {
                'period_days': period_days,
                'total_appeals': len(appeals),
                'type_distribution': type_stats,
                'common_themes': themes[:10],
                'response_rate': self._calculate_response_rate(appeals),
                'last_updated': datetime.now().isoformat()
            }
            
            logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∑–∞ {period_days} –¥–Ω–µ–π")
            return trends
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {}

    def _extract_themes(self, texts):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö —Ç–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        try:
            if not texts:
                return []
                
            combined_text = " ".join(texts[:20])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω –∏ –≤—ã–¥–µ–ª–∏ 10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Ç–µ–º/–ø—Ä–æ–±–ª–µ–º.
            –í–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: [{{"theme": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "frequency": "–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è"}}]
            
            –¢–µ–∫—Å—Ç—ã: {combined_text[:3000]}
            """
            
            response = self.gigachat.chat_completion([
                {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫, –≤—ã–¥–µ–ª—è—é—â–∏–π –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏–π"},
                {"role": "user", "content": prompt}
            ])
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
            try:
                themes = json.loads(response)
                return themes
            except:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç –æ—Ç GigaChat, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._extract_themes_fallback(texts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            return self._extract_themes_fallback(texts)

    def _extract_themes_fallback(self, texts):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not texts:
            return []
            
        keywords = {
            '–¥–æ—Ä–æ–≥–∏': ['–¥–æ—Ä–æ–≥', '–∞—Å—Ñ–∞–ª—å—Ç', '—è–º–∞', '—Ä–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–≥'],
            '–ñ–ö–•': ['–∂–∫—Ö', '—É–ø—Ä–∞–≤–ª—è—é—â–∞—è', '–æ—Ç–æ–ø–ª–µ–Ω', '–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω', '–º—É—Å–æ—Ä'],
            '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['–∞–≤—Ç–æ–±—É—Å', '–æ—Å—Ç–∞–Ω–æ–≤–∫', '–º–∞—Ä—à—Ä—É—Ç', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
            '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': ['–ø–∞—Ä–∫', '—Å–∫–≤–µ—Ä', '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞', '–æ–∑–µ–ª–µ–Ω–µ–Ω'],
            '—à—É–º': ['—à—É–º', '–≥—Ä–æ–º–∫–æ', '—Ç–∏—à–∏–Ω–∞'],
            '–¥–æ–∫—É–º–µ–Ω—Ç—ã': ['—Å–ø—Ä–∞–≤–∫', '–¥–æ–∫—É–º–µ–Ω—Ç', '–ø–æ–ª—É—á–∏—Ç—å']
        }
        
        themes = []
        for theme, words in keywords.items():
            count = sum(1 for text in texts if any(word in text.lower() for word in words))
            if count > 0:
                frequency = "–≤—ã—Å–æ–∫–∞—è" if count > 10 else "—Å—Ä–µ–¥–Ω—è—è" if count > 5 else "–Ω–∏–∑–∫–∞—è"
                themes.append({"theme": theme, "frequency": frequency, "count": count})
        
        return sorted(themes, key=lambda x: x.get('count', 0), reverse=True)

    def _calculate_response_rate(self, appeals):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        if not appeals:
            return 0
            
        answered = sum(1 for a in appeals if a['status'] == 'answered')
        total = len(appeals)
        return round((answered / total * 100), 2) if total > 0 else 0

    def get_common_types(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        return self.common_types