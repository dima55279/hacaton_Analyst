import requests
from bs4 import BeautifulSoup
import mysql.connector
import logging
import re

logger = logging.getLogger(__name__)

class SettlementParser:
    def __init__(self, db_config):
        self.db_config = db_config
        self.target_url = "https://geoadm.com/naselennye-punkty-tambovskoy-oblasti.html"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        }
    
    def create_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            conn = mysql.connector.connect(**self.db_config)
            cursor = conn.cursor()
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS settlements (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    type VARCHAR(100) NOT NULL,
                    population INT,
                    district VARCHAR(255),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    INDEX idx_name (name),
                    INDEX idx_district (district)
                )
            """)
            
            conn.commit()
            cursor.close()
            conn.close()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ settlements —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: id, name, type, population, district")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã settlements: {e}")
            raise
    
    def parse_geoadm_table(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏"""
        try:
            logger.info(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {self.target_url}")
            response = requests.get(self.target_url, headers=self.headers, timeout=30)
            response.encoding = 'utf-8'
            
            if response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                return []
            
            soup = BeautifulSoup(response.content, 'html.parser')
            settlements = []
            
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"
            target_header = None
            headers = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'strong', 'b'])
            
            for header in headers:
                header_text = header.get_text().strip()
                if "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏" in header_text:
                    target_header = header
                    logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã")
                    break
            
            if not target_header:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏'")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                return self.find_table_by_content(soup)
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            table = self.find_table_after_header(target_header)
            
            if not table:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                return []
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
            settlements = self.parse_settlements_table(table)
            
            logger.info(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤: {len(settlements)}")
            return settlements
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return []
    
    def find_table_after_header(self, header):
        """–ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        current_element = header
        for _ in range(20):  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∏—Å–∫ 20 —Å–ª–µ–¥—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            current_element = current_element.find_next_sibling()
            if not current_element:
                break
            
            if current_element.name == 'table':
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç–æ–¥–æ–º find_next_sibling")
                return current_element
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–Ω—É—Ç—Ä–∏ –¥–∏–≤–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            if current_element.find('table'):
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
                return current_element.find('table')
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        all_tables = header.find_all_next('table')
        for table in all_tables[:5]:  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
            table_text = table.get_text()
            if any(keyword in table_text for keyword in ['–¢–∞–º–±–æ–≤', '–ú–∏—á—É—Ä–∏–Ω—Å–∫', '—Å–µ–ª–æ', '–¥–µ—Ä–µ–≤–Ω—è', '–≥–æ—Ä–æ–¥']):
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é")
                return table
        
        return None
    
    def find_table_by_content(self, soup):
        """–ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
        
        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        tables = soup.find_all('table')
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(tables)}")
        
        for i, table in enumerate(tables):
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã {i+1}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
            table_text = table.get_text()
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
            tambov_keywords = ['–¢–∞–º–±–æ–≤', '–ú–∏—á—É—Ä–∏–Ω—Å–∫', '–ú–æ—Ä—à–∞–Ω—Å–∫', '–ö–æ—Ç–æ–≤—Å–∫', '–†–∞—Å—Å–∫–∞–∑–æ–≤–æ', '–£–≤–∞—Ä–æ–≤–æ']
            keyword_matches = sum(1 for keyword in tambov_keywords if keyword in table_text)
            
            if keyword_matches >= 2:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i+1} –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏")
                settlements = self.parse_settlements_table(table)
                if settlements:
                    return settlements
        
        return []
    
    def parse_settlements_table(self, table):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏"""
        settlements = []
        rows = table.find_all('tr')
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")
        
        if not rows or len(rows) < 2:
            logger.error("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        header_row = rows[0]
        headers = [self.clean_whitespace(th.get_text()) for th in header_row.find_all(['th', 'td'])]
        logger.info(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {headers}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –æ–∂–∏–¥–∞–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
        name_idx, type_idx, population_idx, district_idx = self.find_column_indexes(headers)
        
        logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫: –Ω–∞–∑–≤–∞–Ω–∏–µ={name_idx}, —Ç–∏–ø={type_idx}, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ={population_idx}, —Ä–∞–π–æ–Ω={district_idx}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if name_idx == -1:
            name_idx = 0
        if type_idx == -1:
            type_idx = 1 if len(headers) > 1 else 0
        if population_idx == -1:
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            for i in range(len(headers)):
                if any(char.isdigit() for char in headers[i]):
                    population_idx = i
                    break
            if population_idx == -1 and len(headers) > 2:
                population_idx = 2
        if district_idx == -1:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–∞–π–æ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–µ
            district_idx = len(headers) - 1
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        for i, row in enumerate(rows[1:], 1):
            try:
                cols = row.find_all(['td', 'th'])
                if len(cols) < max(name_idx, type_idx, population_idx, district_idx) + 1:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i} –∏–º–µ–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(cols)}")
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, –∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                name = self.clean_whitespace(self.extract_text_from_col(cols, name_idx))
                settlement_type = self.clean_whitespace(self.extract_text_from_col(cols, type_idx))
                population_text = self.clean_whitespace(self.extract_text_from_col(cols, population_idx))
                district = self.clean_whitespace(self.extract_text_from_col(cols, district_idx))
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                population = self.parse_population(population_text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                if name and settlement_type:
                    settlement = {
                        'name': name,
                        'type': settlement_type,
                        'population': population,
                        'district': district
                    }
                    settlements.append(settlement)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                    if i <= 5:
                        logger.info(f"üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {settlement}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                continue
        
        return settlements
    
    def find_column_indexes(self, headers):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
        name_idx, type_idx, population_idx, district_idx = -1, -1, -1, -1
        
        for i, header in enumerate(headers):
            header_lower = header.lower()
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            if any(pattern in header_lower for pattern in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', '–∏–º—è', '–≥–æ—Ä–æ–¥']):
                name_idx = i
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç–∏–ø–æ–º
            elif any(pattern in header_lower for pattern in ['—Ç–∏–ø', '–≤–∏–¥']):
                type_idx = i
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º
            elif any(pattern in header_lower for pattern in ['–Ω–∞—Å–µ–ª–µ–Ω–∏–µ', '–∂–∏—Ç–µ–ª–∏', '—á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å', '–Ω–∞—Å–µ–ª–µ–Ω–∏']):
                population_idx = i
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ä–∞–π–æ–Ω–æ–º
            elif any(pattern in header_lower for pattern in ['—Ä–∞–π–æ–Ω', '–æ–∫—Ä—É–≥', '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π']):
                district_idx = i
        
        return name_idx, type_idx, population_idx, district_idx
    
    def extract_text_from_col(self, cols, index):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if index == -1 or index >= len(cols):
            return ""
        
        return cols[index].get_text()
    
    def clean_whitespace(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)"""
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+', ' ', text.strip())
        
        return text
    
    def parse_population(self, population_text):
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ"""
        if not population_text:
            return None
        
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–æ–≤ (–¥–ª—è —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏)
            clean_text = re.sub(r'[^\d\s]', '', population_text)
            clean_text = clean_text.replace(' ', '')
            
            if clean_text and clean_text.isdigit():
                population = int(clean_text)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
                if population > 0:
                    return population
            
            return None
        except:
            return None
    
    def save_to_database(self, settlements):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = mysql.connector.connect(**self.db_config)
            cursor = conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("DELETE FROM settlements")
            
            insert_query = """
                INSERT INTO settlements (name, type, population, district)
                VALUES (%s, %s, %s, %s)
            """
            
            success_count = 0
            for settlement in settlements:
                try:
                    cursor.execute(insert_query, (
                        settlement['name'],
                        settlement['type'],
                        settlement['population'],
                        settlement['district']
                    ))
                    success_count += 1
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {settlement['name']}: {e}")
                    continue
            
            conn.commit()
            cursor.close()
            conn.close()
            
            logger.info(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {success_count} –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            self.show_save_statistics(settlements)
            
            return success_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0
    
    def show_save_statistics(self, settlements):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        if not settlements:
            return
        
        total = len(settlements)
        with_population = sum(1 for s in settlements if s['population'] is not None)
        with_district = sum(1 for s in settlements if s['district'])
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
        logger.info(f"   –° —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞—Å–µ–ª–µ–Ω–∏—è: {with_population} ({with_population/total*100:.1f}%)")
        logger.info(f"   –° —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–π–æ–Ω–∞: {with_district} ({with_district/total*100:.1f}%)")
        
        # –ü–æ–∫–∞–∂–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîç –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        for i, settlement in enumerate(settlements[:5]):
            pop_info = f", –Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {settlement['population']}" if settlement['population'] else ""
            district_info = f", —Ä–∞–π–æ–Ω: {settlement['district']}" if settlement['district'] else ""
            logger.info(f"   {i+1}. {settlement['type']} {settlement['name']}{pop_info}{district_info}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏...")
        self.create_database()
        
        settlements = self.parse_geoadm_table()
        
        if settlements:
            saved_count = self.save_to_database(settlements)
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {saved_count} –∑–∞–ø–∏—Å–µ–π")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            return False

# –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
def inspect_table_structure():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å–∞–π—Ç–µ"""
    import requests
    from bs4 import BeautifulSoup
    
    url = "https://geoadm.com/naselennye-punkty-tambovskoy-oblasti.html"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
    
    response = requests.get(url, headers=headers)
    response.encoding = 'utf-8'
    
    soup = BeautifulSoup(response.content, 'html.parser')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    with open('geoadm_detailed.html', 'w', encoding='utf-8') as f:
        f.write(soup.prettify())
    
    print("‚úÖ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ geoadm_detailed.html")
    
    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    headers = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'strong', 'b'])
    print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
    for header in headers:
        text = header.get_text().strip()
        if "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏" in text:
            print(f"‚úÖ –¶–ï–õ–ï–í–û–ô –ó–ê–ì–û–õ–û–í–û–ö: {text}")
            # –ù–∞–π–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
            table = header.find_next('table')
            if table:
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                # –ü–æ–∫–∞–∂–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                rows = table.find_all('tr')
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")
                
                if rows:
                    print("\nüìù –ó–ê–ì–û–õ–û–í–ö–ò –¢–ê–ë–õ–ò–¶–´:")
                    header_cells = rows[0].find_all(['th', 'td'])
                    for i, cell in enumerate(header_cells):
                        print(f"  –ö–æ–ª–æ–Ω–∫–∞ {i}: '{cell.get_text().strip()}'")
                    
                    print("\nüìã –ü–ï–†–í–´–ï 5 –°–¢–†–û–ö –î–ê–ù–ù–´–•:")
                    for i, row in enumerate(rows[1:6], 1):
                        cells = row.find_all(['td', 'th'])
                        cell_texts = [f"'{cell.get_text().strip()}'" for cell in cells]
                        print(f"  –°—Ç—Ä–æ–∫–∞ {i}: {cell_texts}")
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        elif text:
            print(f"  - {text}")

if __name__ == "__main__":
    inspect_table_structure()