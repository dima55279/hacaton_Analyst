from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import logging
import asyncio
import mysql.connector
from enum import Enum

logger = logging.getLogger(__name__)

class AddressStates(Enum):
    WAITING_FOR_ADDRESS = 1
    WAITING_FOR_SETTLEMENT = 2
    WAITING_FOR_STREET = 3
    WAITING_FOR_HOUSE = 4

class CitizenBot:
    def __init__(self, token, appeals_system, db_config):
        self.token = token
        self.system = appeals_system
        self.application = None
        self.db_config = db_config
        
    def get_settlements_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤"""
        try:
            return mysql.connector.connect(**self.db_config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ñ–ö–•, –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –æ—Ä–≥–∞–Ω—ã –≤–ª–∞—Å—Ç–∏

–î–ª—è –ø–æ–¥–∞—á–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
"""
        keyboard = [['–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        return ConversationHandler.END

    async def start_appeal_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        instruction_text = """
    üè† –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å.

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–≥–æ—Ä–æ–¥, —Å–µ–ª–æ, –¥–µ—Ä–µ–≤–Ω—è):

    üìù –ü—Ä–∏–º–µ—Ä—ã: 
    ‚Ä¢ –¢–∞–º–±–æ–≤
    ‚Ä¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫  
    ‚Ä¢ –ö–æ—Ç–æ–≤—Å–∫
    ‚Ä¢ –†–∞—Å—Å–∫–∞–∑–æ–≤–æ
    ‚Ä¢ —Å–µ–ª–æ –¢—É–ª–∏–Ω–æ–≤–∫–∞
    ‚Ä¢ –¥–µ—Ä–µ–≤–Ω—è –ö—Ä–∞—Å–Ω–æ—Å–≤–æ–±–æ–¥–Ω–æ–µ
    """
        await update.message.reply_text(instruction_text, reply_markup=ReplyKeyboardRemove())
        return AddressStates.WAITING_FOR_SETTLEMENT

    async def handle_settlement(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        user_input = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        settlement_mapping = context.user_data.get('settlement_mapping')
        if settlement_mapping and user_input in settlement_mapping:
            # –≠—Ç–æ –≤—ã–±–æ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            selected_settlement = settlement_mapping[user_input]
            
            context.user_data['settlement_info'] = {
                'name': selected_settlement['name'],
                'type': selected_settlement['type'],
                'district': selected_settlement['district'],
                'population': selected_settlement['population']
            }
            context.user_data['settlement'] = selected_settlement['name']
            
            # –û—á–∏—â–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
            del context.user_data['settlement_mapping']
            
            await update.message.reply_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {selected_settlement['type']} {selected_settlement['name']}, {selected_settlement['district']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:",
                reply_markup=ReplyKeyboardRemove()
            )
            return AddressStates.WAITING_FOR_STREET
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
        settlement_name = user_input
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫–æ–±–∫–∏ —Å —Ä–∞–π–æ–Ω–æ–º) - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if '(' in user_input and ')' in user_input:
            settlement_name = user_input.split('(')[0].strip()
            
            # –£–¥–∞–ª—è–µ–º —Ç–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–∑ –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            type_prefixes = ['–≥–æ—Ä–æ–¥', '–ø–æ—Å—ë–ª–æ–∫', '—Å–µ–ª–æ', '–¥–µ—Ä–µ–≤–Ω—è', '–ø–≥—Ç', '—Å—Ç–∞–Ω—Ü–∏—è', '—Ö—É—Ç–æ—Ä']
            for prefix in type_prefixes:
                if settlement_name.startswith(prefix):
                    settlement_name = settlement_name[len(prefix):].strip()
                    break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
        context.user_data['settlement_input'] = settlement_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤ –±–∞–∑–µ
        try:
            conn = self.get_settlements_db()
            cursor = conn.cursor(dictionary=True)
            
            # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            cursor.execute(
                "SELECT name, type, district, population FROM settlements WHERE name = %s",
                (settlement_name,)
            )
            
            exact_results = cursor.fetchall()
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
            if not exact_results:
                cursor.execute(
                    "SELECT name, type, district, population FROM settlements WHERE name LIKE %s",
                    (f'%{settlement_name}%',)
                )
                results = cursor.fetchall()
            else:
                results = exact_results
            
            cursor.close()
            conn.close()
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_results = []
            seen_names = set()
            for result in results:
                unique_key = f"{result['name']}_{result['district']}"
                if unique_key not in seen_names:
                    unique_results.append(result)
                    seen_names.add(unique_key)
            
            results = unique_results
            
            if results:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if len(results) == 1:
                    # –û–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    result = results[0]
                    context.user_data['settlement_info'] = {
                        'name': result['name'],
                        'type': result['type'],
                        'district': result['district'],
                        'population': result['population']
                    }
                    context.user_data['settlement'] = result['name']
                    
                    await update.message.reply_text(
                        f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {result['type']} {result['name']}, {result['district']}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:"
                    )
                    return AddressStates.WAITING_FOR_STREET
                else:
                    # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
                    keyboard = []
                    display_names = []
                    
                    for result in results:
                        display_name = f"{result['type']} {result['name']}"
                        if result['district']:
                            display_name += f" ({result['district']})"
                        keyboard.append([display_name])
                        display_names.append(display_name)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
                    context.user_data['settlement_mapping'] = {
                        display_names[i]: results[i] for i in range(len(display_names))
                    }
                    
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                    await update.message.reply_text(
                        f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π:",
                        reply_markup=reply_markup
                    )
                    return AddressStates.WAITING_FOR_SETTLEMENT
            else:
                # –ù–ê–°–ï–õ–ï–ù–ù–´–ô –ü–£–ù–ö–¢ –ù–ï –ù–ê–ô–î–ï–ù - –ù–ï –ü–†–û–î–û–õ–ñ–ê–ï–ú –ü–†–û–¶–ï–°–°
                error_message = f"""
    ‚ùå –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç '{settlement_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –µ—â–µ —Ä–∞–∑:
    """
                await update.message.reply_text(error_message)
                # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                return AddressStates.WAITING_FOR_SETTLEMENT
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: {e}")
            error_message = f"""
    ‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –µ—â–µ —Ä–∞–∑:
    """
            await update.message.reply_text(error_message)
            return AddressStates.WAITING_FOR_SETTLEMENT

    async def handle_street(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–ª–∏—Ü—ã"""
        street = update.message.text.strip()
        context.user_data['street'] = street
        
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return AddressStates.WAITING_FOR_HOUSE

    async def handle_house(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞"""
        house = update.message.text.strip()
        context.user_data['house'] = house
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
        settlement = context.user_data.get('settlement', '')
        street = context.user_data.get('street', '')
        
        full_address = f"{settlement}, {street}, {house}"
        context.user_data['full_address'] = full_address
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏
        address_info = {
            'settlement': settlement,
            'street': street,
            'house': house,
            'full_address': full_address
        }
        
        if 'settlement_info' in context.user_data:
            settlement_info = context.user_data['settlement_info']
            address_info.update({
                'district': settlement_info.get('district'),
                'settlement_type': settlement_info.get('type')
            })
        
        context.user_data['address_info'] = address_info
        
        await update.message.reply_text(
            f"‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {full_address}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:"
        )
        return AddressStates.WAITING_FOR_ADDRESS

    async def handle_appeal_with_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º"""
        user = update.message.from_user
        appeal_text = update.message.text
        address_info = context.user_data.get('address_info', {})
        
        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {user.first_name} —Å –∞–¥—Ä–µ—Å–æ–º {address_info.get('full_address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}: {appeal_text}")
        await update.message.chat.send_action(action="typing")

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –∞–¥—Ä–µ—Å–æ–º
            response = self.system.process_citizen_appeal(
                user_id=str(user.id),
                appeal_text=appeal_text,
                platform="telegram",
                address_info=address_info
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
            keyboard = [['–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(response, reply_markup=reply_markup)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await update.message.reply_text(error_message)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if 'address_info' in context.user_data:
            del context.user_data['address_info']
        
        return ConversationHandler.END

    async def cancel_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
        await update.message.reply_text(
            "–í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardMarkup([['–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è']], resize_keyboard=True)
        )
        context.user_data.clear()
        return ConversationHandler.END

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """
üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"
2. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ —à–∞–≥–∞–º:
   - –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
   - –£–ª–∏—Ü–∞
   - –ù–æ–º–µ—Ä –¥–æ–º–∞
3. –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏–π:
‚Ä¢ "–í–æ –¥–≤–æ—Ä–µ —Ä–∞–∑–±–∏—Ç–∞ –¥–æ—Ä–æ–≥–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–º–æ–Ω—Ç"
‚Ä¢ "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–ª–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"
‚Ä¢ "–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ª–∞–≤–æ—á–∫–∏"

–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∞–¥—Ä–µ—Å—É.
"""
        await update.message.reply_text(help_text)

    async def show_my_appeals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.message.from_user
        
        try:
            appeals = self.system.database.get_appeals({
                'user_id': str(user.id)
            }, limit=5)
            
            if not appeals:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
                return
            
            response = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
            for i, appeal in enumerate(appeals, 1):
                status_emoji = "‚úÖ" if appeal['status'] == 'answered' else "‚è≥" if appeal['status'] == 'in_progress' else "üìù"
                address = appeal.get('full_address', '–∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                response += f"{i}. {status_emoji} {appeal['text'][:50]}...\n"
                response += f"   üìç –ê–¥—Ä–µ—Å: {address}\n"
                response += f"   –°—Ç–∞—Ç—É—Å: {appeal['status']}\n"
                if appeal.get('response'):
                    response += f"   –û—Ç–≤–µ—Ç: {appeal['response'][:100]}...\n"
                response += "\n"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == '–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ':
            await self.start_appeal_process(update, context)
        elif text == '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è':
            await self.show_my_appeals(update, context)
        else:
            # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
            keyboard = [['–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–î–ª—è –ø–æ–¥–∞—á–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ'",
                reply_markup=reply_markup
            )

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å ConversationHandler –¥–ª—è –∞–¥—Ä–µ—Å–∞"""
        # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
        address_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ$'), self.start_appeal_process)],
            states={
                AddressStates.WAITING_FOR_SETTLEMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_settlement)
                ],
                AddressStates.WAITING_FOR_STREET: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_street)
                ],
                AddressStates.WAITING_FOR_HOUSE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_house)
                ],
                AddressStates.WAITING_FOR_ADDRESS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_appeal_with_address)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_address)]
        )

        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(address_conv_handler)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def cancel_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        context.user_data.clear()
        
        cancel_message = """
    ‚ùå –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.

    –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ ¬´–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ¬ª.

    –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
    ‚Ä¢ –í—ã –≤–≤–æ–¥–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    ‚Ä¢ –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (—Å., –¥., –≥., –ø–≥—Ç.)
    """
        keyboard = [['–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(cancel_message, reply_markup=reply_markup)
        return ConversationHandler.END
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ event loop"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers()

            logger.info("ü§ñ –ë–æ—Ç –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –∑–∞–ø—É—â–µ–Ω...")
            self.application.run_polling()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω: {e}")