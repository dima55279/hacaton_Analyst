from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging

logger = logging.getLogger(__name__)

class CitizenBot:
    def __init__(self, token, appeals_system):
        self.token = token
        self.system = appeals_system
        self.application = None

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ñ–ö–•, –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –æ—Ä–≥–∞–Ω—ã –≤–ª–∞—Å—Ç–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é.

–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
"""
        keyboard = [['–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """
üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è
3. –î–ª—è —Ç–∏–ø–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
4. –°–ª–æ–∂–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º

–ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏–π:
‚Ä¢ "–í–æ –¥–≤–æ—Ä–µ –¥–æ–º–∞ ‚Ññ5 –ø–æ —É–ª–∏—Ü–µ –õ–µ–Ω–∏–Ω–∞ —Ä–∞–∑–±–∏—Ç–∞ –¥–æ—Ä–æ–≥–∞"
‚Ä¢ "–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ª–∞–≤–æ—á–∫–∏ –≤ –ø–∞—Ä–∫–µ –ì–æ—Ä—å–∫–æ–≥–æ"
‚Ä¢ "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Å–æ—Å—Ç–∞–≤–µ —Å–µ–º—å–∏?"

–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.
"""
        await update.message.reply_text(help_text)

    async def handle_appeal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"""
        user = update.message.from_user
        appeal_text = update.message.text

        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({user.id}): {appeal_text}")
        await update.message.chat.send_action(action="typing")

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
            response = self.system.process_citizen_appeal(
                user_id=str(user.id),
                appeal_text=appeal_text,
                platform="telegram"
            )
            
            await update.message.reply_text(response)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await update.message.reply_text(error_message)

    async def show_my_appeals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.message.from_user
        
        try:
            appeals = self.system.database.get_appeals({
                'user_id': str(user.id)
            }, limit=5)
            
            if not appeals:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
                return
            
            response = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
            for i, appeal in enumerate(appeals, 1):
                status_emoji = "‚úÖ" if appeal['status'] == 'answered' else "‚è≥" if appeal['status'] == 'in_progress' else "üìù"
                response += f"{i}. {status_emoji} {appeal['text'][:50]}...\n"
                response += f"   –°—Ç–∞—Ç—É—Å: {appeal['status']}\n"
                if appeal['response']:
                    response += f"   –û—Ç–≤–µ—Ç: {appeal['response'][:100]}...\n"
                response += "\n"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == '–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ':
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:")
        elif text == '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è':
            await self.show_my_appeals(update, context)
        else:
            await self.handle_appeal(update, context)

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers()

            logger.info("ü§ñ –ë–æ—Ç –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –∑–∞–ø—É—â–µ–Ω...")
            self.application.run_polling()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")