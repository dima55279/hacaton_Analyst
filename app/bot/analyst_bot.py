from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)

class AnalystBot:
    def __init__(self, token, appeals_system):
        self.token = token
        self.system = appeals_system
        self.application = None

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"""
        welcome_text = """
üìä –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏–π

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
/trends - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
/appeals - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
/help - –°–ø—Ä–∞–≤–∫–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
"""
        keyboard = [
            ['üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìä –¢—Ä–µ–Ω–¥—ã'],
            ['üìù –û–±—Ä–∞—â–µ–Ω–∏—è', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            stats = self.system.database.get_appeals_stats(30)
            
            if not stats:
                await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
                return
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            type_counts = {}
            status_counts = {}
            total = 0
            
            for stat in stats:
                appeal_type = stat['type'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
                type_counts[appeal_type] = type_counts.get(appeal_type, 0) + stat['count']
                status_counts[stat['status']] = status_counts.get(stat['status'], 0) + stat['count']
                total += stat['count']
            
            response = f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:\n\n"
            response += f"–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {total}\n\n"
            
            response += "–ü–æ —Ç–∏–ø–∞–º:\n"
            for appeal_type, count in sorted(type_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
                response += f"‚Ä¢ {appeal_type}: {count}\n"
            
            response += "\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
            for status, count in status_counts.items():
                response += f"‚Ä¢ {status}: {count}\n"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    async def show_trends(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã"""
        try:
            trends = self.system.get_analytics(30)
            
            response = f"üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ 30 –¥–Ω–µ–π:\n\n"
            response += f"–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {trends['total_appeals']}\n"
            response += f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {trends['response_rate']}%\n\n"
            
            response += "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:\n"
            for appeal_type, count in trends['type_distribution'].items():
                response += f"‚Ä¢ {appeal_type}: {count}\n"
            
            response += "\n–ß–∞—Å—Ç—ã–µ —Ç–µ–º—ã:\n"
            for theme in trends['common_themes'][:5]:
                response += f"‚Ä¢ {theme['theme']} ({theme['frequency']})\n"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤.")

    async def show_recent_appeals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        try:
            appeals = self.system.database.get_appeals(limit=5)
            
            if not appeals:
                await update.message.reply_text("–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return
            
            response = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
            for i, appeal in enumerate(appeals, 1):
                status_emoji = "‚úÖ" if appeal['status'] == 'answered' else "‚è≥"
                response += f"{i}. {status_emoji} {appeal['type'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
                response += f"   {appeal['text'][:100]}...\n"
                response += f"   –°—Ç–∞—Ç—É—Å: {appeal['status']}\n\n"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"""
        help_text = """
üìã –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:

/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
/trends - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —á–∞—Å—Ç—ã—Ö —Ç–µ–º
/appeals - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
"""
        await update.message.reply_text(help_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await self.show_stats(update, context)
        elif text == 'üìä –¢—Ä–µ–Ω–¥—ã':
            await self.show_trends(update, context)
        elif text == 'üìù –û–±—Ä–∞—â–µ–Ω–∏—è':
            await self.show_recent_appeals(update, context)
        elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
            await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        self.application.add_handler(CommandHandler("trends", self.show_trends))
        self.application.add_handler(CommandHandler("appeals", self.show_recent_appeals))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ event loop"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers()

            logger.info("ü§ñ –ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
            self.application.run_polling()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: {e}")