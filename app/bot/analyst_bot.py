from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import asyncio
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import io
import numpy as np
import seaborn as sns
from datetime import timedelta

logger = logging.getLogger(__name__)

class AnalystBot:
    def __init__(self, token, appeals_system):
        self.token = token
        self.system = appeals_system
        self.application = None

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"""
        welcome_text = """
üìä –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏–π

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/trends - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
/appeals - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
/charts - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
/refresh - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
/help - –°–ø—Ä–∞–≤–∫–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
"""
        keyboard = [
            ['üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìä –¢—Ä–µ–Ω–¥—ã'],
            ['üìù –û–±—Ä–∞—â–µ–Ω–∏—è', 'üìä –ì—Ä–∞—Ñ–∏–∫–∏'],
            ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def show_municipality_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º
            stats = self.system.database.get_municipality_stats(30)
            
            if not stats:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
                return
            
            response = "üèõÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–£–ù–ò–¶–ò–ü–ê–õ–ò–¢–ï–¢–ê–ú (30 –¥–Ω–µ–π)\n\n"
            
            # –¢–æ–ø-10 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π
            response += "üìä –¢–æ–ø-10 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π:\n"
            for i, municipality in enumerate(stats[:10], 1):
                response += f"{i}. {municipality['municipality']}: {municipality['appeal_count']} –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
                response += f"   ‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {municipality['answered_count']} "
                response += f"({municipality['response_rate']}%)\n"
                response += f"   üÜï –ù–æ–≤—ã—Ö: {municipality['new_count']} | "
                response += f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {municipality['in_progress_count']}\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_appeals = sum(m['appeal_count'] for m in stats)
            municipalities_with_data = len([m for m in stats if m['municipality'] != '–ù–µ —É–∫–∞–∑–∞–Ω'])
            
            response += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞: {total_appeals}\n"
            response += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤: {municipalities_with_data}\n"
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å
            if municipalities_with_data > 0:
                avg_appeals = total_appeals / municipalities_with_data
                response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç: {avg_appeals:.1f}\n"
            else:
                response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            response += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º.")

    async def show_municipality_charts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º"""
        try:
            await update.message.reply_text("üèõÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            stats = self.system.database.get_municipality_stats(30)
            type_stats = self.system.database.get_municipality_type_stats(30)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(stats)} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º")
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(type_stats)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π")
            
            if not stats:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º.")
                return

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            charts = await self._generate_municipality_charts(stats, type_stats)
            
            if not charts:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            for chart_data in charts:
                try:
                    photo_buffer = io.BytesIO()
                    chart_data['figure'].savefig(photo_buffer, format='PNG', dpi=100, bbox_inches='tight')
                    photo_buffer.seek(0)
                    
                    await update.message.reply_photo(
                        photo=photo_buffer,
                        caption=chart_data['caption']
                    )
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º figure –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
                    plt.close(chart_data['figure'])
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º.")

    def _generate_municipality_charts(self, stats, type_stats):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º"""
        charts = []
        
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º. stats: {len(stats)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - —É–±–∏—Ä–∞–µ–º "–ù–µ —É–∫–∞–∑–∞–Ω"
            valid_stats = [m for m in stats if m['municipality'] != '–ù–µ —É–∫–∞–∑–∞–Ω']
            logger.info(f"üìä –í–∞–ª–∏–¥–Ω—ã—Ö –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤: {len(valid_stats)}")
            
            if not valid_stats:
                return charts

            # 1. –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π
            logger.info("üìä –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
            bar_chart = self._create_municipality_bar_chart(valid_stats)
            if bar_chart:
                charts.append({
                    'figure': bar_chart,
                    'caption': "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º (—Ç–æ–ø-10)"
                })

            # 2. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π
            logger.info("üìà –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
            pie_chart = self._create_municipality_pie_chart(valid_stats)
            if pie_chart:
                charts.append({
                    'figure': pie_chart,
                    'caption': "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º"
                })

            # 3. Heatmap –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞—Ö
            if type_stats:
                logger.info("üî• –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É...")
                heatmap = self._create_municipality_heatmap(type_stats)
                if heatmap:
                    charts.append({
                        'figure': heatmap,
                        'caption': "üî• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º"
                    })
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(charts)} –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º: {e}")
            
        return charts

    def _create_municipality_bar_chart(self, stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        try:
            # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤
            top_municipalities = stats[:10]
            
            logger.info(f"üìä –°–æ–∑–¥–∞–µ–º –±–∞—Ä—á–∞—Ä—Ç –¥–ª—è {len(top_municipalities)} –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤")
            
            if not top_municipalities:
                return None
            
            municipalities = []
            counts = []
            
            for m in top_municipalities:
                name = m['municipality']
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
                municipalities.append(name)
                counts.append(m['appeal_count'])
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
            plt.style.use('seaborn-v0_8')
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            fig, ax = plt.subplots(figsize=(16, 10))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            colors = plt.cm.viridis(np.linspace(0, 1, len(municipalities)))
            
            bars = ax.bar(municipalities, counts, color=colors, edgecolor='black', alpha=0.8)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, count in zip(bars, counts):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{count}', ha='center', va='bottom', fontweight='bold', fontsize=10)
            
            ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π', fontsize=12, fontweight='bold')
            ax.set_xlabel('–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã', fontsize=12, fontweight='bold')
            ax.set_title('–¢–æ–ø-10 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π', 
                        fontsize=16, fontweight='bold', pad=20)
            
            # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≥–æ–ª –∏ —É–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            plt.xticks(
                rotation=45, 
                ha='right',
                fontsize=9,  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                wrap=True    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å–ª–æ–≤
            )
            plt.yticks(fontsize=10)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
            ax.grid(True, axis='y', alpha=0.3)
            ax.set_axisbelow(True)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º layout –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
            plt.tight_layout()
            
            return fig
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            return None

    def _create_municipality_heatmap(self, type_stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            municipalities = list(set([s['municipality'] for s in type_stats]))
            appeal_types = list(set([s['appeal_type'] for s in type_stats]))
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
            data_matrix = np.zeros((len(municipalities), len(appeal_types)))
            
            for stat in type_stats:
                i = municipalities.index(stat['municipality'])
                j = appeal_types.index(stat['appeal_type'])
                data_matrix[i, j] = stat['type_count']
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            if len(municipalities) > 15:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –±–µ—Ä–µ–º —Ç–æ–ø-15
                municipality_totals = data_matrix.sum(axis=1)
                top_indices = np.argsort(municipality_totals)[-15:][::-1]
                municipalities = [municipalities[i] for i in top_indices]
                data_matrix = data_matrix[top_indices, :]
            
            if len(appeal_types) > 10:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
                type_totals = data_matrix.sum(axis=0)
                top_type_indices = np.argsort(type_totals)[-10:][::-1]
                appeal_types = [appeal_types[i] for i in top_type_indices]
                data_matrix = data_matrix[:, top_type_indices]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            fig, ax = plt.subplots(figsize=(16, 12))
            im = ax.imshow(data_matrix, cmap='YlOrRd', aspect='auto')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            ax.set_xticks(np.arange(len(appeal_types)))
            ax.set_yticks(np.arange(len(municipalities)))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ax.set_xticklabels(appeal_types, rotation=45, ha='right', fontsize=9)
            ax.set_yticklabels(municipalities, fontsize=9)  # –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∏
            for i in range(len(municipalities)):
                for j in range(len(appeal_types)):
                    if data_matrix[i, j] > 0:
                        text = ax.text(j, i, int(data_matrix[i, j]),
                                      ha="center", va="center", color="black", fontsize=8)
            
            ax.set_title("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: —Ç–∏–ø—ã –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º", 
                        fontsize=16, fontweight='bold', pad=20)
            plt.colorbar(im, ax=ax, label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π')
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
            plt.tight_layout()
            
            return fig
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {e}")
            return None

    def _create_municipality_pie_chart(self, stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã, —É–±–∏—Ä–∞—è "–ù–µ —É–∫–∞–∑–∞–Ω"
        valid_stats = [m for m in stats if m['municipality'] != '–ù–µ —É–∫–∞–∑–∞–Ω']
        
        if not valid_stats:
            fig, ax = plt.subplots(figsize=(10, 8))
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º\n(–≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä–∞–π–æ–Ω–∞)', 
                    ha='center', va='center', transform=ax.transAxes, fontsize=12)
            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º', fontsize=14)
            return fig
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-8 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ "–î—Ä—É–≥–∏–µ"
        if len(valid_stats) > 8:
            top_municipalities = valid_stats[:8]
            other_count = sum(m['appeal_count'] for m in valid_stats[8:])
            top_municipalities.append({
                'municipality': '–î—Ä—É–≥–∏–µ',
                'appeal_count': other_count
            })
        else:
            top_municipalities = valid_stats
        
        labels = [m['municipality'] for m in top_municipalities]
        sizes = [m['appeal_count'] for m in top_municipalities]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –∏—Ö –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        formatted_labels = []
        for label in labels:
            if len(label) > 20:  # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
                words = label.split()
                if len(words) > 1:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
                    mid = len(words) // 2
                    formatted_label = ' '.join(words[:mid]) + '\n' + ' '.join(words[mid:])
                    formatted_labels.append(formatted_label)
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ø–æ–ª–∞–º
                    mid = len(label) // 2
                    formatted_labels.append(label[:mid] + '\n' + label[mid:])
            else:
                formatted_labels.append(label)
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        colors = plt.cm.Paired(np.linspace(0, 1, len(labels)))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        fig, ax = plt.subplots(figsize=(14, 10))
        wedges, texts, autotexts = ax.pie(
            sizes, 
            labels=formatted_labels,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
            colors=colors,
            autopct='%1.1f%%',
            startangle=90,
            textprops={'fontsize': 9}  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        )
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
            autotext.set_fontsize(8)
        
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º', 
                    fontsize=16, fontweight='bold', pad=20)
        plt.tight_layout()
        
        return fig

    async def show_charts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤–∫–ª—é—á–∞—è –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã"""
        try:
            await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            stats = self.system.database.get_appeals_stats(30)
            municipality_stats = self.system.database.get_municipality_stats(30)
            municipality_type_stats = self.system.database.get_municipality_type_stats(30)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(municipality_stats)} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º")
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(municipality_type_stats)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
            charts = await self._generate_all_charts(stats, municipality_stats, municipality_type_stats)
            
            if not charts:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            for chart_data in charts:
                try:
                    photo_buffer = io.BytesIO()
                    chart_data['figure'].savefig(photo_buffer, format='PNG', dpi=100, bbox_inches='tight')
                    photo_buffer.seek(0)
                    
                    await update.message.reply_photo(
                        photo=photo_buffer,
                        caption=chart_data['caption']
                    )
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º figure –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
                    plt.close(chart_data['figure'])
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.")

    async def _generate_all_charts(self, stats, municipality_stats, municipality_type_stats):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤–∫–ª—é—á–∞—è –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã"""
        charts = []
        
        try:
            # 1. –û–±—ã—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
            regular_charts = await self._generate_charts(stats)
            charts.extend(regular_charts)
            
            # 2. –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if municipality_stats and any(m['municipality'] != '–ù–µ —É–∫–∞–∑–∞–Ω' for m in municipality_stats):
                municipality_charts = self._generate_municipality_charts(municipality_stats, municipality_type_stats)
                charts.extend(municipality_charts)
            else:
                # –ì—Ä–∞—Ñ–∏–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º\n\n–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n1. –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤\n2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã', 
                        ha='center', va='center', transform=ax.transAxes, fontsize=12, 
                        bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
                ax.set_title('–î–∞–Ω–Ω—ã–µ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', fontsize=14, pad=20)
                ax.set_xticks([])
                ax.set_yticks([])
                
                charts.append({
                    'figure': fig,
                    'caption': "‚ÑπÔ∏è –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ"
                })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            
        return charts

    def _generate_municipality_charts(self, stats, type_stats):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º"""
        charts = []
        
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º. stats: {len(stats)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - —É–±–∏—Ä–∞–µ–º "–ù–µ —É–∫–∞–∑–∞–Ω"
            valid_stats = [m for m in stats if m['municipality'] != '–ù–µ —É–∫–∞–∑–∞–Ω']
            logger.info(f"üìä –í–∞–ª–∏–¥–Ω—ã—Ö –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤: {len(valid_stats)}")
            
            if not valid_stats:
                return charts

            # 1. –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π
            logger.info("üìä –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
            bar_chart = self._create_municipality_bar_chart(valid_stats)
            if bar_chart:
                charts.append({
                    'figure': bar_chart,
                    'caption': "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º (—Ç–æ–ø-10)"
                })

            # 2. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π
            logger.info("üìà –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
            pie_chart = self._create_municipality_pie_chart(valid_stats)
            if pie_chart:
                charts.append({
                    'figure': pie_chart,
                    'caption': "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º"
                })

            # 3. Heatmap –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞—Ö
            if type_stats:
                logger.info("üî• –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É...")
                heatmap = self._create_municipality_heatmap(type_stats)
                if heatmap:
                    charts.append({
                        'figure': heatmap,
                        'caption': "üî• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º"
                    })
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(charts)} –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º: {e}")
            
        return charts

    async def _generate_charts(self, stats):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        charts = []
        
        try:
            # 1. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
            type_chart = self._create_type_pie_chart(stats)
            charts.append({
                'figure': type_chart,
                'caption': "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º (–∑–∞ 30 –¥–Ω–µ–π)"
            })
            
            # 2. –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_chart = self._create_status_bar_chart(stats)
            charts.append({
                'figure': status_chart,
                'caption': "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–∑–∞ 30 –¥–Ω–µ–π)"
            })
            
            # 3. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º
            timeline_chart = self._create_timeline_chart(stats)
            if timeline_chart:
                charts.append({
                    'figure': timeline_chart,
                    'caption': "üìÖ –î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º (–∑–∞ 30 –¥–Ω–µ–π)"
                })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            
        return charts

    def _create_type_pie_chart(self, stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
        type_counts = {}
        for stat in stats:
            appeal_type = stat['type'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
            type_counts[appeal_type] = type_counts.get(appeal_type, 0) + stat['count']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        if not type_counts:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            fig, ax = plt.subplots(figsize=(10, 8))
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', transform=ax.transAxes)
            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π')
            return fig
        
        types = list(type_counts.keys())
        counts = list(type_counts.values())
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        colors = plt.cm.Set3(np.linspace(0, 1, len(types)))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        fig, ax = plt.subplots(figsize=(12, 8))
        wedges, texts, autotexts = ax.pie(
            counts, 
            labels=types, 
            colors=colors,
            autopct='%1.1f%%',
            startangle=90,
            textprops={'fontsize': 10}
        )
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º', fontsize=16, fontweight='bold', pad=20)
        plt.tight_layout()
        
        return fig

    def _create_status_bar_chart(self, stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–π —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for stat in stats:
            status = stat['status'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
            status_counts[status] = status_counts.get(status, 0) + stat['count']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        if not status_counts:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', transform=ax.transAxes, fontsize=16)
            ax.set_title('–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞—â–µ–Ω–∏–π', fontsize=18, fontweight='bold', pad=20)
            ax.set_xticks([])
            ax.set_yticks([])
            return fig
        
        statuses = list(status_counts.keys())
        counts = list(status_counts.values())
        
        # –Ø—Ä–∫–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_colors = {
            '–Ω–æ–≤–æ–µ': '#FF6B6B',        # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
            '–æ—Ç–≤–µ—á–µ–Ω–æ': '#4ECDC4',      # –ë–∏—Ä—é–∑–æ–≤—ã–π
            '–≤ —Ä–∞–±–æ—Ç–µ': '#45B7D1',      # –ì–æ–ª—É–±–æ–π
            '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏': '#FFA07A',  # –°–≤–µ—Ç–ª–æ-–∫–æ—Ä–∞–ª–ª–æ–≤—ã–π
            '–∑–∞–∫—Ä—ã—Ç–æ': '#98D8C8',       # –ú—è—Ç–Ω—ã–π
            '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω': '#F7DC6F'   # –ñ–µ–ª—Ç—ã–π
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        colors = [status_colors.get(status, '#BB8FCE') for status in statuses]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        plt.style.use('seaborn-v0_8-darkgrid')
        fig, ax = plt.subplots(figsize=(14, 8))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏ —Ç–µ–Ω—å—é
        bars = ax.bar(statuses, counts, color=colors, edgecolor='white', linewidth=2, 
                    alpha=0.85, zorder=3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –∫ —Å—Ç–æ–ª–±—Ü–∞–º
        for bar, color in zip(bars, colors):
            bar.set_color(color)
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            gradient = np.linspace(0.85, 1.0, 100).reshape(1, -1)
            gradient = np.vstack((gradient, gradient))
            bar.set_zorder(4)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        for bar, count in zip(bars, counts):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{count}', ha='center', va='bottom', 
                fontweight='bold', fontsize=14, color='#2C3E50',
                bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8, edgecolor='none'))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π', fontsize=14, fontweight='bold', color='#2C3E50')
        ax.set_xlabel('–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞—â–µ–Ω–∏–π', fontsize=14, fontweight='bold', color='#2C3E50')
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º', 
                    fontsize=18, fontweight='bold', pad=25, color='#2C3E50')
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
        plt.xticks(rotation=15, ha='right', fontsize=12, fontweight='bold')
        plt.yticks(fontsize=12)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
        ax.grid(True, axis='y', alpha=0.3, zorder=0)
        ax.grid(True, axis='x', alpha=0.1, zorder=0)
        ax.set_axisbelow(True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        ax.set_facecolor('#F8F9F9')
        fig.patch.set_facecolor('#FFFFFF')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫—É—é —Ç–µ–Ω—å –≤–æ–∫—Ä—É–≥ –¥–∏–∞–≥—Ä–∞–º–º—ã
        for spine in ax.spines.values():
            spine.set_color('#BDC3C7')
            spine.set_linewidth(1.5)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª—ã –æ—Å–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ax.set_ylim(0, max(counts) * 1.15)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        ax.imshow([[0, 0], [1, 1]], cmap=plt.cm.Blues, extent=ax.get_xlim() + ax.get_ylim(), 
                alpha=0.02, aspect='auto', zorder=1)
        
        plt.tight_layout()
        
        return fig

    def _create_timeline_chart(self, stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
            appeals = self.system.database.get_appeals({
                'date_from': datetime.now() - timedelta(days=30)
            }, limit=1000)
            
            if not appeals:
                return None
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_counts = {}
            for appeal in appeals:
                if isinstance(appeal['created_at'], datetime):
                    date_key = appeal['created_at'].date()
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
                    date_key = datetime.strptime(appeal['created_at'], '%Y-%m-%d %H:%M:%S').date()
                
                daily_counts[date_key] = daily_counts.get(date_key, 0) + 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            dates = sorted(daily_counts.keys())
            counts = [daily_counts[date] for date in dates]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
            date_labels = [date.strftime('%d.%m') for date in dates]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(14, 6))
            ax.plot(date_labels, counts, marker='o', linewidth=2, markersize=6, color='#FF6384')
            ax.fill_between(date_labels, counts, alpha=0.3, color='#FF6384')
            
            ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π', fontsize=12)
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º', fontsize=16, fontweight='bold')
            
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞—Ç
            plt.xticks(rotation=45, ha='right')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
            ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            return fig
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏: {e}")
            return None

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            stats = self.system.database.get_real_time_stats()
            
            if not stats:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return
            
            response = f"üìà –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
            response += f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {stats['total']}\n"
            response += f"üïê –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats['last_24h']}\n\n"
            
            response += "üìã –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
            for status, count in stats['status_stats'].items():
                status_emoji = self._get_status_emoji(status)
                response += f"  {status_emoji} {status}: {count}\n"
            
            response += "\nüè∑Ô∏è –¢–æ–ø-5 –ø–æ —Ç–∏–ø–∞–º:\n"
            for i, type_stat in enumerate(stats['type_stats'], 1):
                appeal_type = type_stat['type'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
                response += f"  {i}. {appeal_type}: {type_stat['count']}\n"
            
            response += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    async def show_trends(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            trends = self.system.get_analytics(30)
            
            if not trends:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.")
                return
            
            response = f"üìä –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í (30 –¥–Ω–µ–π)\n\n"
            response += f"üìà –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {trends['total_appeals']}\n"
            response += f"üìû –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {trends['response_rate']}%\n\n"
            
            response += "üè∑Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:\n"
            for appeal_type, count in trends['type_distribution'].items():
                response += f"  ‚Ä¢ {appeal_type}: {count}\n"
            
            response += "\nüîç –ß–∞—Å—Ç—ã–µ —Ç–µ–º—ã:\n"
            for theme in trends.get('common_themes', [])[:5]:
                theme_name = theme.get('theme', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
                frequency = theme.get('frequency', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                response += f"  ‚Ä¢ {theme_name} ({frequency})\n"
            
            response += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤.")

    async def show_recent_appeals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            appeals = self.system.database.get_recent_appeals(5)
            
            if not appeals:
                await update.message.reply_text("üì≠ –ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return
            
            response = "üìù –ü–û–°–õ–ï–î–ù–ò–ï –û–ë–†–ê–©–ï–ù–ò–Ø\n\n"
            for i, appeal in enumerate(appeals, 1):
                status_emoji = self._get_status_emoji(appeal['status'])
                appeal_type = appeal['type'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
                created_time = appeal['created_at'].strftime('%H:%M') if isinstance(appeal['created_at'], datetime) else appeal['created_at']
                
                response += f"{i}. {status_emoji} *{appeal_type}*\n"
                response += f"   üìÑ {appeal['text'][:80]}...\n"
                response += f"   üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {appeal['status']}\n"
                response += f"   üèõÔ∏è –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç: {appeal.get('district', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                response += f"   ‚è∞ {created_time}\n\n"
            
            response += f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.")

    async def refresh_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            response = "üîÑ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
            response += "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"""
        help_text = """
üìã –ü–ê–ù–ï–õ–¨ –ê–ù–ê–õ–ò–¢–ò–ö–ê

*/stats* - –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
*/trends* - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ 30 –¥–Ω–µ–π
*/appeals* - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
*/charts* - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
*/refresh* - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
*/help* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üèõÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º:*
‚Ä¢ –¢–æ–ø-10 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π
‚Ä¢ –¢–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üìä *–ì—Ä–∞—Ñ–∏–∫–∏ –≤–∫–ª—é—á–∞—é—Ç:*
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
‚Ä¢ –î–∏–Ω–∞–º–∏–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º

üí° *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –æ—Ç—á–µ—Ç–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
"""
        await update.message.reply_text(help_text, parse_mode='Markdown')

    def _get_status_emoji(self, status):
        """–ü–æ–ª—É—á–∏—Ç—å emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        status_emojis = {
            '–Ω–æ–≤–æ–µ': 'üÜï',
            '–æ—Ç–≤–µ—á–µ–Ω–æ': '‚úÖ',
            '–≤ —Ä–∞–±–æ—Ç–µ': 'üîÑ',
            '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏': 'üë®‚Äçüíº',
            '–∑–∞–∫—Ä—ã—Ç–æ': 'üîí'
        }
        return status_emojis.get(status, 'üìÑ')


    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await self.show_stats(update, context)
        elif text == 'üìä –¢—Ä–µ–Ω–¥—ã':
            await self.show_trends(update, context)
        elif text == 'üìù –û–±—Ä–∞—â–µ–Ω–∏—è':
            await self.show_recent_appeals(update, context)
        elif text == 'üìä –ì—Ä–∞—Ñ–∏–∫–∏':
            await self.show_charts(update, context)  # –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã
        elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
            await self.refresh_command(update, context)
        elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
            await self.help_command(update, context)

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –£–î–ê–õ–ï–ù–´ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        self.application.add_handler(CommandHandler("trends", self.show_trends))
        self.application.add_handler(CommandHandler("appeals", self.show_recent_appeals))
        self.application.add_handler(CommandHandler("charts", self.show_charts))  # –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –≤—Å—ë
        self.application.add_handler(CommandHandler("refresh", self.refresh_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ event loop"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers()

            logger.info("ü§ñ –ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
            self.application.run_polling()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: {e}")