from flask import Flask, render_template, jsonify, request
import json
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

def create_dashboard_app(appeals_system):
    app = Flask(__name__)
    system = appeals_system

    @app.route('/')
    def index():
        logger.info("üåê –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞—à–±–æ—Ä–¥–∞")
        return render_template('dashboard.html')

    @app.route('/api/stats')
    def get_stats():
        try:
            period = request.args.get('period', 30, type=int)
            logger.info(f"üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {period} –¥–Ω–µ–π")
            stats = system.database.get_appeals_stats(period)
            return jsonify(stats)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"}), 500

    @app.route('/api/trends')
    def get_trends():
        try:
            period = request.args.get('period', 30, type=int)
            logger.info(f"üìà –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ {period} –¥–Ω–µ–π")
            trends = system.get_analytics(period)
            return jsonify(trends)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤"}), 500

    @app.route('/api/appeals')
    def get_appeals():
        try:
            page = request.args.get('page', 1, type=int)
            limit = request.args.get('limit', 10, type=int)
            offset = (page - 1) * limit
            
            filters = {}
            if 'type' in request.args:
                filters['type'] = request.args.get('type')
            if 'status' in request.args:
                filters['status'] = request.args.get('status')
            
            logger.info(f"üìù –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—â–µ–Ω–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ª–∏–º–∏—Ç {limit})")
            appeals = system.database.get_appeals(filters, limit, offset)
            return jsonify(appeals)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π"}), 500

    @app.route('/api/realtime_stats')
    def get_realtime_stats():
        """–ù–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            logger.info("üîÑ –ó–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            stats = system.database.get_real_time_stats()
            return jsonify(stats)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"}), 500

    @app.route('/api/recent_appeals')
    def get_recent_appeals():
        """–ù–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        try:
            limit = request.args.get('limit', 10, type=int)
            logger.info(f"üÜï –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} –æ–±—Ä–∞—â–µ–Ω–∏–π")
            appeals = system.database.get_recent_appeals(limit)
            return jsonify(appeals)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"}), 500

    @app.route('/api/update_appeal/<int:appeal_id>', methods=['POST'])
    def update_appeal(appeal_id):
        try:
            data = request.json
            logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id}")
            system.database.update_appeal(appeal_id, data)
            return jsonify({'status': 'success'})
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è"}), 500

    return app