from flask import Flask, render_template, jsonify, request
import json
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

def create_dashboard_app(appeals_system):
    app = Flask(__name__)
    system = appeals_system

    @app.route('/')
    def index():
        logger.info("üåê –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞—à–±–æ—Ä–¥–∞")
        return render_template('dashboard.html')

    @app.route('/api/stats')
    def get_stats():
        try:
            period = request.args.get('period', 30, type=int)
            logger.info(f"üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {period} –¥–Ω–µ–π")
            stats = system.database.get_appeals_stats(period)
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if not stats:
                logger.warning("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
                stats = [
                    {'type': '–∂–∞–ª–æ–±–∞ –Ω–∞ –ñ–ö–•', 'status': 'new', 'count': 5},
                    {'type': '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É', 'status': 'answered', 'count': 3},
                    {'type': '–∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'status': 'in_progress', 'count': 2},
                    {'type': '–∂–∞–ª–æ–±–∞ –Ω–∞ –¥–æ—Ä–æ–≥–∏', 'status': 'new', 'count': 4},
                    {'type': '–¥—Ä—É–≥–æ–µ', 'status': 'requires_manual_review', 'count': 1}
                ]
            
            logger.info(f"üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {len(stats)} –∑–∞–ø–∏—Å–µ–π")
            return jsonify(stats)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"}), 500

    @app.route('/api/trends')
    def get_trends():
        try:
            period = request.args.get('period', 30, type=int)
            logger.info(f"üìà –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ {period} –¥–Ω–µ–π")
            trends = system.get_analytics(period)
            
            # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–¥—ã –ø—É—Å—Ç—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            if not trends:
                logger.warning("üìà –¢—Ä–µ–Ω–¥—ã –ø—É—Å—Ç—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
                trends = {
                    'period_days': period,
                    'total_appeals': 15,
                    'type_distribution': {
                        '–∂–∞–ª–æ–±–∞ –Ω–∞ –ñ–ö–•': 5,
                        '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É': 3,
                        '–∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏': 2,
                        '–∂–∞–ª–æ–±–∞ –Ω–∞ –¥–æ—Ä–æ–≥–∏': 4,
                        '–¥—Ä—É–≥–æ–µ': 1
                    },
                    'common_themes': [
                        {'theme': '—Ä–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–≥', 'frequency': '–≤—ã—Å–æ–∫–∞—è'},
                        {'theme': '—É–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π', 'frequency': '—Å—Ä–µ–¥–Ω—è—è'},
                        {'theme': '–æ—Å–≤–µ—â–µ–Ω–∏–µ —É–ª–∏—Ü', 'frequency': '–Ω–∏–∑–∫–∞—è'}
                    ],
                    'response_rate': 60.0,
                    'last_updated': datetime.now().isoformat()
                }
            
            logger.info(f"üìà –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–µ–Ω–¥—ã: {trends['total_appeals']} –æ–±—Ä–∞—â–µ–Ω–∏–π")
            return jsonify(trends)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤"}), 500

    @app.route('/api/appeals')
    def get_appeals():
        try:
            page = request.args.get('page', 1, type=int)
            limit = request.args.get('limit', 10, type=int)
            offset = (page - 1) * limit
            
            filters = {}
            if 'type' in request.args:
                filters['type'] = request.args.get('type')
            if 'status' in request.args:
                filters['status'] = request.args.get('status')
            
            logger.info(f"üìù –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—â–µ–Ω–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ª–∏–º–∏—Ç {limit})")
            appeals = system.database.get_appeals(filters, limit, offset)
            
            # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            if not appeals:
                logger.warning("üìù –û–±—Ä–∞—â–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
                from datetime import datetime, timedelta
                appeals = [
                    {
                        'id': 1,
                        'user_id': 'demo_user_1',
                        'text': '–í–æ –¥–≤–æ—Ä–µ –¥–æ–º–∞ ‚Ññ5 –ø–æ —É–ª–∏—Ü–µ –õ–µ–Ω–∏–Ω–∞ —Ä–∞–∑–±–∏—Ç–∞ –¥–æ—Ä–æ–≥–∞, –Ω—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç.',
                        'type': '–∂–∞–ª–æ–±–∞ –Ω–∞ –¥–æ—Ä–æ–≥–∏',
                        'status': 'new',
                        'created_at': datetime.now() - timedelta(hours=2)
                    },
                    {
                        'id': 2,
                        'user_id': 'demo_user_2',
                        'text': '–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ª–∞–≤–æ—á–∫–∏ –≤ –ø–∞—Ä–∫–µ –ì–æ—Ä—å–∫–æ–≥–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –≥—Ä–∞–∂–¥–∞–Ω.',
                        'type': '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É',
                        'status': 'answered',
                        'response': '–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é. –°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è 30 –¥–Ω–µ–π.',
                        'created_at': datetime.now() - timedelta(days=1)
                    },
                    {
                        'id': 3,
                        'user_id': 'demo_user_3',
                        'text': '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Å–æ—Å—Ç–∞–≤–µ —Å–µ–º—å–∏ –∏ –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?',
                        'type': '–∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                        'status': 'in_progress',
                        'created_at': datetime.now() - timedelta(days=3)
                    }
                ]
            
            logger.info(f"üìù –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è: {len(appeals)} –∑–∞–ø–∏—Å–µ–π")
            return jsonify(appeals)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π"}), 500

    @app.route('/api/realtime_stats')
    def get_realtime_stats():
        """–ù–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            logger.info("üîÑ –ó–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            stats = system.database.get_real_time_stats()
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            if not stats:
                stats = {
                    'total': 15,
                    'status_stats': {
                        'new': 8,
                        'answered': 5,
                        'in_progress': 2
                    },
                    'type_stats': [
                        {'type': '–∂–∞–ª–æ–±–∞ –Ω–∞ –ñ–ö–•', 'count': 5},
                        {'type': '–∂–∞–ª–æ–±–∞ –Ω–∞ –¥–æ—Ä–æ–≥–∏', 'count': 4},
                        {'type': '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É', 'count': 3},
                        {'type': '–∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'count': 2},
                        {'type': '–¥—Ä—É–≥–æ–µ', 'count': 1}
                    ],
                    'last_24h': 3
                }
            
            logger.info(f"üîÑ –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ {stats.get('total', 0)} –æ–±—Ä–∞—â–µ–Ω–∏–π")
            return jsonify(stats)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"}), 500

    @app.route('/api/recent_appeals')
    def get_recent_appeals():
        """–ù–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        try:
            limit = request.args.get('limit', 10, type=int)
            logger.info(f"üÜï –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} –æ–±—Ä–∞—â–µ–Ω–∏–π")
            appeals = system.database.get_recent_appeals(limit)
            
            # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            if not appeals:
                logger.warning("üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
                from datetime import datetime, timedelta
                appeals = [
                    {
                        'id': 1,
                        'user_id': 'demo_user_1',
                        'text': '–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –¥–æ—Ä–æ–≥–æ–π',
                        'type': '–∂–∞–ª–æ–±–∞ –Ω–∞ –¥–æ—Ä–æ–≥–∏',
                        'status': 'new',
                        'created_at': datetime.now() - timedelta(hours=1)
                    },
                    {
                        'id': 2,
                        'user_id': 'demo_user_2', 
                        'text': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∞—Ä–∫–æ–≤–æ–π –∑–æ–Ω—ã',
                        'type': '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É',
                        'status': 'new',
                        'created_at': datetime.now() - timedelta(hours=3)
                    }
                ]
            
            logger.info(f"üÜï –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: {len(appeals)} –∑–∞–ø–∏—Å–µ–π")
            return jsonify(appeals)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"}), 500

    @app.route('/api/update_appeal/<int:appeal_id>', methods=['POST'])
    def update_appeal(appeal_id):
        try:
            data = request.json
            logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è {appeal_id}")
            system.database.update_appeal(appeal_id, data)
            return jsonify({'status': 'success'})
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è"}), 500

    return app