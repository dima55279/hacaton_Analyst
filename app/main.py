import logging
import sys
import json
import multiprocessing
from datetime import datetime
from database.database_manager import DatabaseManager
from gigachat.api_client import GigaChatClient
from processing.analyzer import AppealsAnalyzer
from bot.citizen_bot import CitizenBot
from bot.analyst_bot import AnalystBot
from web.dashboard import create_dashboard_app
from processing.data_parser import SettlementParser  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("appeals_system.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class AppealsProcessingSystem:
    def __init__(self, config):
        self.config = config
        self.gigachat = GigaChatClient(config['gigachat_api_key'])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.database = DatabaseManager(config['mysql_config'])
        self.analyzer = AppealsAnalyzer(self.gigachat, self.database)
        
    def process_citizen_appeal(self, user_id, appeal_text, platform="telegram", address_info=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ —Å –∞–¥—Ä–µ—Å–æ–º"""
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
            appeal_type = self.analyzer.classify_appeal(appeal_text)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            appeal_data = {
                'user_id': user_id,
                'text': appeal_text,
                'type': appeal_type,
                'platform': platform,
                'status': 'new',
                'created_at': datetime.now()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if address_info:
                appeal_data.update({
                    'settlement': address_info.get('settlement'),
                    'street': address_info.get('street'),
                    'house': address_info.get('house'),
                    'full_address': address_info.get('full_address')
                })
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
            appeal_id = self.database.store_appeal(appeal_data)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if appeal_type in self.analyzer.get_common_types():
                response = self.analyzer.generate_response(appeal_id, appeal_text, appeal_type, address_info)
                self.database.update_appeal(appeal_id, {'response': response, 'status': 'answered'})
                return response
            else:
                # –î–ª—è –Ω–µ—Ç–∏–ø–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π —Ç–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞
                response = self.analyzer.generate_response(appeal_id, appeal_text, appeal_type, address_info)
                self.database.update_appeal(appeal_id, {'response': response, 'status': 'requires_manual_review'})
                return response
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def get_analytics(self, period_days=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        return self.analyzer.analyze_trends(period_days)

def init_settlements_database(config):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤"""
    try:
        from processing.data_parser import SettlementParser
        
        parser = SettlementParser(config['mysql_config'])
        success = parser.run()
        
        if success:
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")
            
        return success
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤: {e}")
        return False

def run_citizen_bot(config):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    system = AppealsProcessingSystem(config)
    citizen_bot = CitizenBot(config['telegram_bot_token'], system, config['mysql_config'])  # –ü–µ—Ä–µ–¥–∞–µ–º db_config
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω...")
    citizen_bot.run()

def run_analyst_bot(config):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    system = AppealsProcessingSystem(config)
    analyst_bot = AnalystBot(config['analyst_bot_token'], system)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤...")
    analyst_bot.run()

def run_dashboard(config):
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    system = AppealsProcessingSystem(config)
    web_app = create_dashboard_app(system)
    web_port = config.get('web_port', 5000)
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É {web_port}...")
    web_app.run(host='0.0.0.0', port=web_port, debug=False, use_reloader=False)

def main():
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open("config.json", "r") as f:
            config = json.load(f)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        DatabaseManager(config['mysql_config'])
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
        init_settlements_database(config)
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        processes = []
        
        # –ü—Ä–æ—Ü–µ—Å—Å –¥–ª—è –±–æ—Ç–∞ –≥—Ä–∞–∂–¥–∞–Ω
        citizen_process = multiprocessing.Process(target=run_citizen_bot, args=(config,))
        processes.append(citizen_process)
        
        # –ü—Ä–æ—Ü–µ—Å—Å –¥–ª—è –±–æ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
        analyst_process = multiprocessing.Process(target=run_analyst_bot, args=(config,))
        processes.append(analyst_process)
        
        # –ü—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        dashboard_process = multiprocessing.Process(target=run_dashboard, args=(config,))
        processes.append(dashboard_process)
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for process in processes:
            process.start()
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for process in processes:
            process.join()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        db_manager = DatabaseManager()
        db_manager.close()

if __name__ == "__main__":
    main()